---
title: "Reductions"
---

# Network Flow <!-- from day20.pptx -->

::: {.titlereading}
Readings in CLRS 4th edition: chapter 24
:::

```{python}
def print_bipartite_graph(width,which,style=""):
	print(f"""<table class="bipart" style="width:{width}%;{style}"><tr><td><table>
<tr><td><svg viewBox="0 0 80 20"><text x="0" y="15">Professors</text></svg></td></tr>
<tr><td><div> ![](https://engineering.virginia.edu/sites/default/files/styles/square_xxsml/public/Headshot.webp?itok=5IwaFPya) </div></td></tr>
<tr><td><div> ![](https://engineering.virginia.edu/sites/default/files/styles/square_xxsml/public/2024-07/RobbieHott-2023.JPG?h=83d1c70a&itok=kpjw11sp) </div></td></tr>
<tr><td><div> ![](https://engineering.virginia.edu/sites/default/files/styles/square_xxsml/public/Pettit3.JPG?h=7d5d1757&itok=jvoP0ymk) </div></td></tr>
<tr><td><div> ![](https://www.cs.virginia.edu/~asb/images/me.jpg) </div></td></tr>
</table></td><td><img src="graphs/reductions/bipartite_graph-{which}.svg"></td><td><table>
<tr><td><svg viewBox="0 0 80 20"><text x="16" y="15">Dogs</text></svg></td></tr>
<tr><td><div> ![](https://upload.wikimedia.org/wikipedia/commons/thumb/a/a7/Sobaka_Husky.JPG/940px-Sobaka_Husky.JPG) </div></td></tr>
<tr><td><div> ![](https://upload.wikimedia.org/wikipedia/commons/thumb/e/e4/Labrador_Retriever_snow.jpg/1196px-Labrador_Retriever_snow.jpg) </div></td></tr>
<tr><td><div> ![](https://upload.wikimedia.org/wikipedia/commons/f/f4/MiniDachshund1_wb.jpg) </div></td></tr>
<tr><td><div> ![](https://upload.wikimedia.org/wikipedia/commons/thumb/6/65/Jonangi.jpg/1280px-Jonangi.jpg) </div></td></tr>
</table></td></tr></table>""")
```

## Network Flow

![](https://upload.wikimedia.org/wikipedia/commons/thumb/c/cc/OpenRailwayMap_of_Northeastern_US_and_Southeastern_Canada.png/1024px-OpenRailwayMap_of_Northeastern_US_and_Southeastern_Canada.png){.center style="object-fit:none;object-position:right;height:513px;width:864px"}

<span class="font-90">**Question:** What is the maximum throughput of the railroad network from Omaha (OMA, far left) to Boston (BBY, far right)?</span>




## Flow Networks
<!-- day20 slide 13 -->

<table style="width:100%"><tr><td class="font-90" style="vertical-align:top;padding-left:0;width:40%">

&nbsp;

::: {.no-bullets-left}
- Graph $G=(V,E)$
- <span class='purple'>Start node</span> ${\color{purple}s}\in V$
- <span class='navyblue'>Sink node</span> ${\color{Blue}t}\in V$
- <span class='green'>Edge capacities</span> ${\color{green}c(e)} \in \mathbb{R}^+$
:::

</td><td class="svg-table-right compact">

::: {.svg-100}
<img src="graphs/reductions/flow_graph-1.svg">
:::

</td></tr></table>

**Max flow intuition:** If $\color{purple}s$ is a faucet, $\color{Blue}t$ is a drain, and $\color{purple}s$ connects to $\color{Blue}t$ through a network of pipes $E$ with capacities $\color{green}c(e)$, what is the <span class='und'>maximum</span> amount of water which can flow from the faucet to the drain?


## Network Flow
<!-- day20 slide 14 -->

::: {.svg-50-right-flow-graph}

<p class="font-75 center"><span class='red'>flow</span> / <span class='green'>capacity</span></p>

<img src="graphs/reductions/flow_graph-2.svg">


:::

<div class="font-75">

- Assignment of values $\color{red}f(e)$ to edges
	- "Amount of water going through that pipe"
- Capacity constraint
	- ${\color{red}f(e)} \le {\color{green}c(e)}$
	- "Flow cannot exceed capacity"
- Flow constraint
	- $\forall v \in V - \{ {\color{purple}s},{\color{Blue}t}\}$, $\text{inflow}(v)=\text{outflow}(v)$
	- $\text{inflow}(v)=\sum_{v \in V}f(x,v)$
	- $\text{outflow}(v)=\sum_{v \in V}f(v,x)$
	- Water going in must match water coming out
- Flow of $G$: $|f|=\text{outflow}({\color{purple}s})-\text{inflow}({\color{purple}s})$
- Net outflow of $\color{purple}s$
	- <span class='red'>3 in this example</span>

</div>


## Maximum Flow Problem
<!-- day20 slide 15 -->

<p class="font-90 center">Of all valid flows through the graph, find one that maximizes:</p>

$$|f|=\text{outflow}({\color{purple}s})-\text{inflow}({\color{purple}s})$$

<table class="width-100"><tr><td class="compact">
::: {.svg-100}
<img src="graphs/reductions/flow_graph-1.svg">
:::
</td><td class="compact">
::: {.fragment}
::: {.svg-100}
<img src="graphs/reductions/flow_graph-3.svg">
:::
:::
</td></tr></table>




## Greedy Approach
<!-- day20 slide 16 -->

**Greedy choice:** saturate *highest* capacity path first


<img src="graphs/reductions/diamond_flow.svg" class="center" style="height:50%;width:50%">



## Greedy Approach
<!-- day20 slide 17 -->

**Greedy choice:** saturate *highest* capacity path first

<img src="graphs/reductions/diamond_flow-1.svg" class="center" style="height:50%;width:50%">



## Greedy Approach
<!-- day20 slide 18 -->

**Greedy choice:** saturate *highest* capacity path first

<img src="graphs/reductions/diamond_flow-1-1.svg" class="center" style="height:50%;width:50%">

<p class='red'>Flow: 20</p>


## Greedy Approach
<!-- day20 slide 19 -->

**Greedy choice:** saturate *highest* capacity path first

<img src="graphs/reductions/diamond_flow-2-2.svg" class="center" style="height:50%;width:50%">

<p class='red'>Maximum flow: 30</p>

<span class="font-90">**Observe:** highest capacity path is not <span class='und'>saturated</span> in optimal solution</span>



## Residual Graphs
<!-- day20 slide 20 -->

<table class="width-100"><tr><td colspan='2' class="font-70 zero-bottom">

Given a flow $f$ in graph $G$, the residual graph $G_{\color{red}f}$ models <span class='und'>additional</span> flow that is possible

- <span class='orange und'>Forward edge</span> for each edge in $G$ with weight set to remaining capacity ${\color{green}c(e)}-{\color{red}f(e)}$
  - Models <span class='und'>additional</span> flow that can be sent along the edge: <span class='purple'>flow to add</span>

</td></tr><tr><td colspan='2' class="font-75 opacity-0 zero-bottom">

- <span class='magenta und'>Backward edge</span> by flipping each edge $e$ in $G$ with weight set to flow ${\color{red}f(e)}$
  - Models amount of flow that can be <span class='und'>removed</span> from the edge: <span class='purple'>flow to remove</span>

</td></tr><tr><td class="compact">

::: {.svg-100}
<img src="graphs/reductions/flow_graph-2.svg">
:::

<p class='svgcaption center'>Flow $\color{red}f$ in $G$</p>

</td><td class="compact">
::: {.fragment}
::: {.svg-100}
<img src="graphs/reductions/flow_graph-2-True.svg">
:::

<p class='svgcaption center'>Residual graph $G_{\color{red}f}$</p>
:::

</td></tr></table>



## Residual Graphs
<!-- day20 slide 21 -->

<table class="width-100"><tr><td colspan='2' class="font-70 zero-bottom">

Given a flow $f$ in graph $G$, the residual graph $G_{\color{red}f}$ models <span class='und'>additional</span> flow that is possible

- <span class='orange und'>Forward edge</span> for each edge in $G$ with weight set to remaining capacity ${\color{green}c(e)}-{\color{red}f(e)}$
  - Models <span class='und'>additional</span> flow that can be sent along the edge: <span class='purple'>flow to add</span>

</td></tr><tr><td colspan='2' class="font-75 zero-bottom">

- <span class='magenta und'>Backward edge</span> by flipping each edge $e$ in $G$ with weight set to flow ${\color{red}f(e)}$
  - Models amount of flow that can be <span class='und'>removed</span> from the edge: <span class='purple'>flow to remove</span>

</td></tr><tr><td class="compact">

::: {.svg-100}
<img src="graphs/reductions/flow_graph-2.svg">
:::

<p class='svgcaption center'>Flow $\color{red}f$ in $G$</p>

</td><td class="compact">
::: {.svg-100}
<img src="graphs/reductions/flow_graph-2-True.svg">
:::

<p class='svgcaption center'>Residual graph $G_{\color{red}f}$</p>

</td></tr></table>



## Residual Graphs Example
<!-- day20 slide 22 -->

<table style="width:80%"><tr><td class="und bold" style="text-align:center;width:50%">Flow Graph</td><td class="und bold" style="text-align:center">Residual Graph</td></tr>
<tr><td style="vertical-align:top;padding:0">

::: {.r-stack}
<p style="margin:0"><img src="graphs/reductions/diamond_flow-0-3.svg" class="center diamond_flow_in_table"></p>
:::

</td><td style="vertical-align:top;padding:0">

::: {.r-stack}

<p style="margin:0" class="fragment fade-out" data-fragment-index=1><img src="graphs/reductions/diamond_flow-0-4-True.svg" class="center diamond_flow_in_table"></p>

<p style="margin:0" class="fragment" data-fragment-index=1><img src="graphs/reductions/diamond_flow-0-4-True-2.svg" class="center diamond_flow_in_table"></p>

:::

</td></tr><tr><td style="vertical-align:top;padding:0">

::: {.r-stack}

<p style="margin:0" class="fragment" data-fragment-index=2><img src="graphs/reductions/diamond_flow-0-2.svg" class="center diamond_flow_in_table"></p>

:::

</td><td style="vertical-align:top;padding:0">

::: {.r-stack}
<p style="margin:0" class="fragment" data-fragment-index=3><img src="graphs/reductions/diamond_flow-0-5-True.svg" class="center diamond_flow_in_table"></p>
:::

</td></tr>
</table>



## Residual Graphs
<!-- day20 slide 23 -->

<table><tr><td colspan='2' class="font-75 zero-bottom">

Consider a path from ${\color{purple}s} \rightarrow {\color{Blue}t}$ in $G_{\color{red}f}$ using only edges with positive (non-zero) weight
Consider the minimum-weight edge  along the path: we can increase the flow by $w(e)$

</td></tr><tr><td colspan='2' class="font-75 opacity-0 zero-bottom">

- Send $w(e)$ flow along all <span class='orange'>forward</span> edges (these have at least $w(e)$ capacity)
- Remove $w(e)$ flow along all <span class='magenta'>backward</span> edges (these contain at least $w(e)$ units of flow)

</td></tr><tr><td colspan='2' class="font-75 opacity-0 zero-bottom">

<span class="bold">Observe:</span> Flow has <span class='und'>increased</span> by $w(e)$

</td></tr><tr><td class="compact">
::: {.svg-100}
<img src="graphs/reductions/flow_graph-2.svg">
:::
</td><td class="compact">
::: {.svg-100}
<img src="graphs/reductions/flow_graph-2-True.svg">
:::
</td></tr></table>



## Residual Graphs
<!-- day20 slide 24 -->

<table><tr><td colspan='2' class="font-75 zero-bottom">

Consider a path from ${\color{purple}s} \rightarrow {\color{Blue}t}$ in $G_{\color{red}f}$ using only edges with positive (non-zero) weight
Consider the minimum-weight edge  along the path: we can increase the flow by $w(e)$

</td></tr><tr><td colspan='2' class="font-75 zero-bottom">

- Send $w(e)$ flow along all <span class='orange'>forward</span> edges (these have at least $w(e)$ capacity)
- Remove $w(e)$ flow along all <span class='magenta'>backward</span> edges (these contain at least $w(e)$ units of flow)

</td></tr><tr><td colspan='2' class="font-75 opacity-0 zero-bottom">

<span class="bold">Observe:</span> Flow has <span class='und'>increased</span> by $w(e)$

</td></tr><tr><td class="compact">
::: {.svg-100}
<img src="graphs/reductions/flow_graph-2-False-1.svg">
:::
</td><td class="compact">
::: {.svg-100}
<img src="graphs/reductions/flow_graph-2-True-1.svg">
:::
</td></tr></table>


## Residual Graphs
<!-- day20 slide 25 -->

<table><tr><td colspan='2' class="font-75 zero-bottom">

Consider a path from ${\color{purple}s} \rightarrow {\color{Blue}t}$ in $G_{\color{red}f}$ using only edges with positive (non-zero) weight
Consider the minimum-weight edge  along the path: we can increase the flow by $w(e)$

</td></tr><tr><td colspan='2' class="font-75 zero-bottom">

- Send $w(e)$ flow along all <span class='orange'>forward</span> edges (these have at least $w(e)$ capacity)
- Remove $w(e)$ flow along all <span class='magenta'>backward</span> edges (these contain at least $w(e)$ units of flow)

</td></tr><tr><td colspan='2' class="font-75 zero-bottom">

<span class="bold">Observe:</span> Flow has <span class='und'>increased</span> by $w(e)$

</td></tr><tr><td class="compact">

::: {.svg-100}
<img src="graphs/reductions/flow_graph-3-False-1.svg">
:::
</td><td class="compact">
::: {.svg-100}
<img src="graphs/reductions/flow_graph-3-True.svg">
:::
</td></tr></table>


## Ford-Fulkerson Algorithm

<div class="font-85">

<p>Define an augmenting path to be an ${\color{purple}s} \rightarrow {\color{Blue}t}$ path in the residual graph $G_{\color{red}f}$ (using edges of non-zero weight)</p>

<p>Ford-Fulkerson max-flow algorithm:</p>
<ul>
<li class=''>Initialize ${\color{red}f(e)}=0$ for all all $e \in E$</li>
<li class=''>Construct the residual network $G_{\color{red}f}$</li>
<li class=''>While there is an augmenting path $p$ in $G_{\color{red}f}$:<ul>
 <li>Let $c=\min_{e \in E}c_f(e)$ where $c_f(e)$ is the weight of edge $e$ in the residual network $G_{\color{red}f}$</li>
 <li>Add $c$ units of flow to $G$ based on the augmenting path $p$</li>
 <li>Update the residual network $G_{\color{red}f}$ for the updated flow</li></ul></li>
</ul>

&nbsp;

::: {.fragment}
<table class='navynote font-75'><tr><td><span class='bold'>Ford-Fulkerson approach:</span> take <span class='und'>any</span> augmenting path (will revisit this later)</td></tr></table>
:::

</div>


## Ford-Fulkerson Example
<!-- day20 slide 29 -->

&nbsp;

<table class="width-100">
<tr><td></td><td style="opacity:0;text-align:center" class="zero-bottom">
<p class='center'>Increase flow by 1 unit</p>
</td></tr>
<tr><td class="compact" style="width:50%">
::: {.svg-100}
<img src="graphs/reductions/flow_graph-4.svg">
:::
</td><td class="compact">
::: {.svg-100}
<img src="graphs/reductions/flow_graph-4-True.svg">
:::

</td></tr>
<tr><td class="font-90">
<span class="bold">Initially:</span> ${\color{red}f(e)}=0$ for all $e \in E$
</td><td style="text-align:center">Residual graph $G_{\color{red}f}$</td></tr>
</td></tr></table>


## Ford-Fulkerson Example
<!-- day20 slide 30 -->

&nbsp;

<table class="width-100">
<tr><td></td><td style="opacity:1;text-align:center" class="zero-bottom">
::: {.fragment}
<p class='center'>Increase flow by 1 unit</p>
:::
</td></tr>
<tr><td class="compact" style="width:50%">
::: {.svg-100}
<img src="graphs/reductions/flow_graph-4.svg">
:::
</td><td class="compact">
::: {.svg-100}
<img src="graphs/reductions/flow_graph-4-True-2.svg">
:::

</td></tr>
<tr><td></td><td style="text-align:center">Residual graph $G_{\color{red}f}$</td></tr>
</td></tr></table>



## Ford-Fulkerson Example
<!-- day20 slide 31 -->

&nbsp;

<table class="width-100">
<tr><td></td><td style="opacity:1;text-align:center" class="zero-bottom">
<p class='center'>Increase flow by 1 unit</p>
</td></tr>
<tr><td class="compact" style="width:50%">
::: {.svg-100}
<img src="graphs/reductions/flow_graph-5-False-2.svg">
:::
</td><td class="compact">
::: {.svg-100}
<img src="graphs/reductions/flow_graph-4-True-2.svg">
:::
</td></tr>
<tr><td></td><td style="text-align:center">Residual graph $G_{\color{red}f}$</td></tr>
</td></tr></table>



## Ford-Fulkerson Example
<!-- day20 slide 32 -->

&nbsp;

<table class="width-100">
<tr><td></td><td style="opacity:0;text-align:center" class="zero-bottom">
<p class='center'>Increase flow by 1 unit</p>
</td></tr>
<tr><td class="compact" style="width:50%">
::: {.svg-100}
<img src="graphs/reductions/flow_graph-5.svg">
:::
</td><td class="compact">
::: {.svg-100}
<img src="graphs/reductions/flow_graph-5-True.svg">
:::
</td></tr>
<tr><td></td><td style="text-align:center">Residual graph $G_{\color{red}f}$</td></tr>
</td></tr></table>



## Ford-Fulkerson Example
<!-- day20 slide 33 -->

&nbsp;

<table class="width-100">
<tr><td></td><td style="opacity:1;text-align:center" class="zero-bottom">
::: {.fragment}
<p class='center'>Increase flow by 1 unit</p>
:::
</td></tr>
<tr><td class="compact" style="width:50%">
::: {.svg-100}
<img src="graphs/reductions/flow_graph-5.svg">
:::
</td><td class="compact">
::: {.svg-100}
<img src="graphs/reductions/flow_graph-5-True-3.svg">
:::
</td></tr>
<tr><td></td><td style="text-align:center">Residual graph $G_{\color{red}f}$</td></tr>
</td></tr></table>



## Ford-Fulkerson Example
<!-- day20 slide 34 -->

&nbsp;

<table class="width-100">
<tr><td></td><td style="opacity:1;text-align:center" class="zero-bottom">
<p class='center'>Increase flow by 1 unit</p>
</td></tr>
<tr><td class="compact" style="width:50%">
::: {.svg-100}
<img src="graphs/reductions/flow_graph-6-False-3.svg">
:::
</td><td class="compact">
::: {.svg-100}
<img src="graphs/reductions/flow_graph-5-True-3.svg">
:::
</td></tr>
<tr><td></td><td style="text-align:center">Residual graph $G_{\color{red}f}$</td></tr>
</td></tr></table>



## Ford-Fulkerson Example
<!-- day20 slide 35 -->

&nbsp;

<table class="width-100">
<tr><td></td><td style="opacity:0;text-align:center" class="zero-bottom">
<p class='center'>Increase flow by 1 unit</p>
</td></tr>
<tr><td class="compact" style="width:50%">
::: {.svg-100}
<img src="graphs/reductions/flow_graph-6.svg">
:::
</td><td class="compact">
::: {.svg-100}
<img src="graphs/reductions/flow_graph-6-True.svg">
:::
</td></tr>
<tr><td></td><td style="text-align:center">Residual graph $G_{\color{red}f}$</td></tr>
</td></tr></table>



## Ford-Fulkerson Example
<!-- day20 slide 36 -->

&nbsp;

<table class="width-100">
<tr><td></td><td style="opacity:1;text-align:center" class="zero-bottom">
::: {.fragment}
<p class='center'>Increase flow by 1 unit</p>
:::
</td></tr>
<tr><td class="compact" style="width:50%">
::: {.svg-100}
<img src="graphs/reductions/flow_graph-6.svg">
:::
</td><td class="compact">
::: {.svg-100}
<img src="graphs/reductions/flow_graph-6-True-4.svg">
:::
</td></tr>
<tr><td></td><td style="text-align:center">Residual graph $G_{\color{red}f}$</td></tr>
</td></tr></table>



## Ford-Fulkerson Example
<!-- day20 slide 37 -->

&nbsp;

<table class="width-100">
<tr><td></td><td style="opacity:1;text-align:center" class="zero-bottom">
<p class='center'>Increase flow by 1 unit</p>
</td></tr>
<tr><td class="compact" style="width:50%">
::: {.svg-100}
<img src="graphs/reductions/flow_graph-7-False-4.svg">
:::
</td><td class="compact">
::: {.svg-100}
<img src="graphs/reductions/flow_graph-6-True-4.svg">
:::
</td></tr>
<tr><td></td><td style="text-align:center">Residual graph $G_{\color{red}f}$</td></tr>
</td></tr></table>



## Ford-Fulkerson Example
<!-- day20 slide 38 -->

&nbsp;

<table class="width-100">
<tr><td></td><td style="opacity:0;text-align:center" class="zero-bottom">
<p class='center'>Increase flow by 1 unit</p>
</td></tr>
<tr><td class="compact" style="width:50%">
::: {.svg-100}
<img src="graphs/reductions/flow_graph-7.svg">
:::
</td><td class="compact">
::: {.svg-100}
<img src="graphs/reductions/flow_graph-7-True.svg">
:::
</td></tr>
<tr><td></td><td style="text-align:center">Residual graph $G_{\color{red}f}$</td></tr>
</td></tr></table>



## Ford-Fulkerson Example
<!-- day20 slide 39 -->

&nbsp;

<table class="width-100">
<tr><td></td><td style="opacity:1;text-align:center" class="zero-bottom">
::: {.fragment}
<p class='center'>Increase flow by 1 unit</p>
:::
</td></tr>
<tr><td class="compact" style="width:50%">
::: {.svg-100}
<img src="graphs/reductions/flow_graph-7.svg">
:::
</td><td class="compact">
::: {.svg-100}
<img src="graphs/reductions/flow_graph-7-True-5.svg">
:::
</td></tr>
<tr><td></td><td style="text-align:center">Residual graph $G_{\color{red}f}$</td></tr>
</td></tr></table>



## Ford-Fulkerson Example
<!-- day20 slide 40 -->

&nbsp;

<table class="width-100">
<tr><td></td><td style="opacity:1;text-align:center" class="zero-bottom">
<p class='center'>Increase flow by 1 unit</p>
</td></tr>
<tr><td class="compact" style="width:50%">
::: {.svg-100}
<img src="graphs/reductions/flow_graph-8-False-5.svg">
:::
</td><td class="compact">
::: {.svg-100}
<img src="graphs/reductions/flow_graph-7-True-5.svg">
:::
</td></tr>
<tr><td></td><td style="text-align:center">Residual graph $G_{\color{red}f}$</td></tr>
</td></tr></table>



## Ford-Fulkerson Example
<!-- day20 slide 41 -->

&nbsp;

<table class="width-100">
<tr><td></td><td style="opacity:1;text-align:center" class="zero-bottom">
::: {.fragment}
No more augmenting paths
:::
</td></tr>
<tr><td class="compact" style="width:50%">
::: {.svg-100}
<img src="graphs/reductions/flow_graph-8.svg">
:::
</td><td class="compact">
::: {.svg-100}
<img src="graphs/reductions/flow_graph-8-True.svg">
:::
</td></tr>
<tr><td>
</td><td style="text-align:center">Residual graph $G_{\color{red}f}$</td></tr>
</td></tr></table>

::: {.fragment}
<span class="bold">Maximum flow:</span> 4
:::


## Ford-Fulkerson Running Time

<p class="font-75">Define an augmenting path to be an ${\color{purple}s} \rightarrow {\color{Blue}t}$ path in the residual graph $G_{\color{red}f}$ (using edges of non-zero weight)</p>

<table class="width-100 font-75"><tr><td style="padding-left:0;padding-top:0" colspan='2'>

::: {.r-stack}
<div style="opacity:1">
<p>Ford-Fulkerson max-flow algorithm:</p>
<ul>
<li class=''>Initialize ${\color{red}f(e)}=0$ for all all $e \in E$</li>
<li class=''>Construct the residual network $G_{\color{red}f}$</li>
<li class=''>While there is an augmenting path $p$ in $G_{\color{red}f}$:<ul>
 <li>Let $c=\min_{e \in E}c_f(e)$ where $c_f(e)$ is the weight of edge $e$ in the residual network $G_{\color{red}f}$</li>
 <li>Add $c$ units of flow to $G$ based on the augmenting path $p$</li>
 <li>Update the residual network $G_{\color{red}f}$ for the updated flow</li></ul></li>
</ul>
</div>

<table class="navynote reduction-center-message" style="opacity:0"><tr><td>
<p>How many iterations are needed??</p>
- For integer-valued capacities, min-weight of each augmenting path is 1, so number of iterations is bounded by $|f^*|$, where $|f^*|$ is max-flow in $G$
- For rational-valued capacities, can scale to make capacities integer
- For irrational-valued capacities, algorithm may never terminate!
</td></tr></table>

<table class="navynote reduction-center-message" style="opacity:0"><tr><td>
<p>For graphs with integer capacities, running time of Ford-Fulkerson is</p><p>$$O(|f^*| \cdot |E|)$$</p>
<p>Highly undesirable if $|f^*| >> |E|$ (e.g., graph is small, but capacities are $\approx 2^{32}$)</p>
<p>As described, algorithm is <span class="und">not</span> polynomial-time!</p>
</td></tr></table>

:::

</td></tr>

<tr><td class="zero-bottom" style="width:45%;padding-left:0;padding-top:0">

<span style="opacity:0"><span class="bold">Initialization:</span> $O(|E|)$</span>

<p style="margin-bottom:6px"><span style="opacity:0"><span class="bold">Construct residual network:</span> $O(|E|)$</span></span></p>

</td><td class="zero-bottom"> <table class="navynote" style="opacity:0"><tr><td class="font-70">We only care about nodes reachable from the source $s$, so the number of nodes that are "relevant" is at most $|E|$</td></tr></table> </td></tr>

<tr><td colspan='2' style="padding-left:0;padding-top:0px">
<p style="margin-top:0"><span style="opacity:0"><span class="bold">Finding *one* augmenting path in residual network:</span> $O(|E|)$ using BFS/DFS</span></p>

</td></tr>
</table>



## Ford-Fulkerson Running Time

<p class="font-75">Define an augmenting path to be an ${\color{purple}s} \rightarrow {\color{Blue}t}$ path in the residual graph $G_{\color{red}f}$ (using edges of non-zero weight)</p>

<table class="width-100 font-75"><tr><td style="padding-left:0;padding-top:0" colspan='2'>

::: {.r-stack}
<div style="opacity:1">
<p>Ford-Fulkerson max-flow algorithm:</p>
<ul>
<li class='purple'>Initialize ${\color{red}f(e)}=0$ for all all $e \in E$</li>
<li class=''>Construct the residual network $G_{\color{red}f}$</li>
<li class=''>While there is an augmenting path $p$ in $G_{\color{red}f}$:<ul>
 <li>Let $c=\min_{e \in E}c_f(e)$ where $c_f(e)$ is the weight of edge $e$ in the residual network $G_{\color{red}f}$</li>
 <li>Add $c$ units of flow to $G$ based on the augmenting path $p$</li>
 <li>Update the residual network $G_{\color{red}f}$ for the updated flow</li></ul></li>
</ul>
</div>

<table class="navynote reduction-center-message" style="opacity:0"><tr><td>
<p>How many iterations are needed?</p>
- For integer-valued capacities, min-weight of each augmenting path is 1, so number of iterations is bounded by $|f^*|$, where $|f^*|$ is max-flow in $G$
- For rational-valued capacities, can scale to make capacities integer
- For irrational-valued capacities, algorithm may never terminate!
</td></tr></table>

<table class="navynote reduction-center-message" style="opacity:0"><tr><td>
<p>For graphs with integer capacities, running time of Ford-Fulkerson is</p><p>$$O(|f^*| \cdot |E|)$$</p>
<p>Highly undesirable if $|f^*| >> |E|$ (e.g., graph is small, but capacities are $\approx 2^{32}$)</p>
<p>As described, algorithm is <span class="und">not</span> polynomial-time!</p>
</td></tr></table>

:::

</td></tr>

<tr><td class="zero-bottom" style="width:45%;padding-left:0;padding-top:0">

::: {.fragment}
<span class="bold">Initialization:</span> $O(|E|)$
:::

<p style="margin-bottom:6px"><span style="opacity:0"><span class="bold">Construct residual network:</span> $O(|E|)$</span></span></p>

</td><td class="zero-bottom"> <table class="navynote" style="opacity:0"><tr><td class="font-70">We only care about nodes reachable from the source $s$, so the number of nodes that are "relevant" is at most $|E|$</td></tr></table> </td></tr>

<tr><td colspan='2' style="padding-left:0;padding-top:0px">
<p style="margin-top:0"><span style="opacity:0"><span class="bold">Finding *one* augmenting path in residual network:</span> $O(|E|)$ using BFS/DFS</span></p>

</td></tr>
</table>




## Ford-Fulkerson Running Time

<p class="font-75">Define an augmenting path to be an ${\color{purple}s} \rightarrow {\color{Blue}t}$ path in the residual graph $G_{\color{red}f}$ (using edges of non-zero weight)</p>

<table class="width-100 font-75"><tr><td style="padding-left:0;padding-top:0" colspan='2'>

::: {.r-stack}
<div style="opacity:1">
<p>Ford-Fulkerson max-flow algorithm:</p>
<ul>
<li class=''>Initialize ${\color{red}f(e)}=0$ for all all $e \in E$</li>
<li class='purple'>Construct the residual network $G_{\color{red}f}$</li>
<li class=''>While there is an augmenting path $p$ in $G_{\color{red}f}$:<ul>
 <li>Let $c=\min_{e \in E}c_f(e)$ where $c_f(e)$ is the weight of edge $e$ in the residual network $G_{\color{red}f}$</li>
 <li>Add $c$ units of flow to $G$ based on the augmenting path $p$</li>
 <li>Update the residual network $G_{\color{red}f}$ for the updated flow</li></ul></li>
</ul>
</div>

<table class="navynote reduction-center-message" style="opacity:0"><tr><td>
<p>How many iterations are needed?</p>
- For integer-valued capacities, min-weight of each augmenting path is 1, so number of iterations is bounded by $|f^*|$, where $|f^*|$ is max-flow in $G$
- For rational-valued capacities, can scale to make capacities integer
- For irrational-valued capacities, algorithm may never terminate!
</td></tr></table>

<table class="navynote reduction-center-message" style="opacity:0"><tr><td>
<p>For graphs with integer capacities, running time of Ford-Fulkerson is</p><p>$$O(|f^*| \cdot |E|)$$</p>
<p>Highly undesirable if $|f^*| >> |E|$ (e.g., graph is small, but capacities are $\approx 2^{32}$)</p>
<p>As described, algorithm is <span class="und">not</span> polynomial-time!</p>
</td></tr></table>

:::

</td></tr>

<tr><td class="zero-bottom" style="width:45%;padding-left:0;padding-top:0">

<span class="bold">Initialization:</span> $O(|E|)$

::: {.fragment}
<p style="margin-bottom:6px"><span style="opacity:1"><span class="bold">Construct residual network:</span> $O(|E|)$</span></span></p>
:::

</td><td class="zero-bottom"> <table class="navynote" style="opacity:0"><tr><td class="font-70">We only care about nodes reachable from the source $s$, so the number of nodes that are "relevant" is at most $|E|$</td></tr></table> </td></tr>

<tr><td colspan='2' style="padding-left:0;padding-top:0px">
<p style="margin-top:0"><span style="opacity:0"><span class="bold">Finding *one* augmenting path in residual network:</span> $O(|E|)$ using BFS/DFS</span></p>

</td></tr>
</table>




## Ford-Fulkerson Running Time

<p class="font-75">Define an augmenting path to be an ${\color{purple}s} \rightarrow {\color{Blue}t}$ path in the residual graph $G_{\color{red}f}$ (using edges of non-zero weight)</p>

<table class="width-100 font-75"><tr><td style="padding-left:0;padding-top:0" colspan='2'>

::: {.r-stack}
<div style="opacity:1">
<p>Ford-Fulkerson max-flow algorithm:</p>
<ul>
<li class=''>Initialize ${\color{red}f(e)}=0$ for all all $e \in E$</li>
<li class=''>Construct the residual network $G_{\color{red}f}$</li>
<li class='purple'>While there is an augmenting path $p$ in $G_{\color{red}f}$:<ul>
 <li>Let $c=\min_{e \in E}c_f(e)$ where $c_f(e)$ is the weight of edge $e$ in the residual network $G_{\color{red}f}$</li>
 <li>Add $c$ units of flow to $G$ based on the augmenting path $p$</li>
 <li>Update the residual network $G_{\color{red}f}$ for the updated flow</li></ul></li>
</ul>
</div>

<table class="navynote reduction-center-message" style="opacity:0"><tr><td>
<p>How many iterations are needed?</p>
- For integer-valued capacities, min-weight of each augmenting path is 1, so number of iterations is bounded by $|f^*|$, where $|f^*|$ is max-flow in $G$
- For rational-valued capacities, can scale to make capacities integer
- For irrational-valued capacities, algorithm may never terminate!
</td></tr></table>

<table class="navynote reduction-center-message" style="opacity:0"><tr><td>
<p>For graphs with integer capacities, running time of Ford-Fulkerson is</p><p>$$O(|f^*| \cdot |E|)$$</p>
<p>Highly undesirable if $|f^*| >> |E|$ (e.g., graph is small, but capacities are $\approx 2^{32}$)</p>
<p>As described, algorithm is <span class="und">not</span> polynomial-time!</p>
</td></tr></table>

:::

</td></tr>

<tr><td class="zero-bottom" style="width:45%;padding-left:0;padding-top:0">

<span class="bold">Initialization:</span> $O(|E|)$

<p style="margin-bottom:6px"><span style="opacity:1"><span class="bold">Construct residual network:</span> $O(|E|)$</span></span></p>

</td><td class="zero-bottom"> 

::: {.fragment fragment-index=2}
<table class="navynote" style="opacity:1"><tr><td class="font-70">We only care about nodes reachable from the source $s$, so the number of nodes that are "relevant" is at most $|E|$</td></tr></table> 
:::

</td></tr>

<tr><td colspan='2' style="padding-left:0;padding-top:0px">
::: {.fragment fragment-index=1}
<p style="margin-top:0"><span style="opacity:1"><span class="bold">Finding *one* augmenting path in residual network:</span> $O(|E|)$ using BFS/DFS</span></p>
:::

</td></tr>
</table>





## Ford-Fulkerson Running Time

<p class="font-75">Define an augmenting path to be an ${\color{purple}s} \rightarrow {\color{Blue}t}$ path in the residual graph $G_{\color{red}f}$ (using edges of non-zero weight)</p>

<table class="width-100 font-75"><tr><td style="padding-left:0;padding-top:0" colspan='2'>

::: {.r-stack}
<div style="opacity:0">
<p>Ford-Fulkerson max-flow algorithm:</p>
<ul>
<li class='purple'>Initialize ${\color{red}f(e)}=0$ for all all $e \in E$</li>
<li class=''>Construct the residual network $G_{\color{red}f}$</li>
<li class=''>While there is an augmenting path $p$ in $G_{\color{red}f}$:<ul>
 <li>Let $c=\min_{e \in E}c_f(e)$ where $c_f(e)$ is the weight of edge $e$ in the residual network $G_{\color{red}f}$</li>
 <li>Add $c$ units of flow to $G$ based on the augmenting path $p$</li>
 <li>Update the residual network $G_{\color{red}f}$ for the updated flow</li></ul></li>
</ul>
</div>

<table class="navynote reduction-center-message" style="opacity:1"><tr><td>
<p>How many iterations are needed?</p>
- For integer-valued capacities, min-weight of each augmenting path is 1, so number of iterations is bounded by $|f^*|$, where $|f^*|$ is max-flow in $G$
</td></tr></table>

<table class="navynote reduction-center-message" style="opacity:0"><tr><td>
<p>For graphs with integer capacities, running time of Ford-Fulkerson is</p><p>$$O(|f^*| \cdot |E|)$$</p>
<p>Highly undesirable if $|f^*| >> |E|$ (e.g., graph is small, but capacities are $\approx 2^{32}$)</p>
<p>As described, algorithm is <span class="und">not</span> polynomial-time!</p>
</td></tr></table>

:::

</td></tr>

<tr><td class="zero-bottom" style="width:45%;padding-left:0;padding-top:0">

<span class="bold">Initialization:</span> $O(|E|)$

<p style="margin-bottom:6px"><span style="opacity:1"><span class="bold">Construct residual network:</span> $O(|E|)$</span></span></p>

</td><td class="zero-bottom"> <table class="navynote" style="opacity:0"><tr><td class="font-70">We only care about nodes reachable from the source $s$, so the number of nodes that are "relevant" is at most $|E|$</td></tr></table> </td></tr>

<tr><td colspan='2' style="padding-left:0;padding-top:0px">
<p style="margin-top:0"><span style="opacity:1"><span class="bold">Finding *one* augmenting path in residual network:</span> $O(|E|)$ using BFS/DFS</span></p>

</td></tr>
</table>



## Worst Case Ford-Fulkerson
<!-- day20 slide 46 -->

<table class="ford_fulk_worst_case">
<tr><td></td><td style="opacity:0;text-align:center" class="zero-bottom">
<p class='center'>Increase flow by 1 unit</p>
</td></tr>
<tr><td class="compact">
<p><img src="graphs/reductions/diamond_flow-0-6.svg" class="center"></p>
</td><td class="compact">
<p><img src="graphs/reductions/diamond_flow-0-7-True.svg" class="center"></p>
</td></tr></table>



## Worst Case Ford-Fulkerson
<!-- day20 slide 47 -->

<table class="ford_fulk_worst_case">
<tr><td></td><td style="opacity:1;text-align:center" class="zero-bottom">
::: {.fragment}
<p class='center'>Increase flow by 1 unit</p>
:::
</td></tr>
<tr><td class="compact">
<p><img src="graphs/reductions/diamond_flow-0-6.svg" class="center"></p>
</td><td class="compact">
<p><img src="graphs/reductions/diamond_flow-0-7-True-1.svg" class="center"></p>
</td></tr></table>


## Worst Case Ford-Fulkerson
<!-- day20 slide 48 -->

<table class="ford_fulk_worst_case">
<tr><td></td><td style="opacity:1;text-align:center" class="zero-bottom">
<p class='center'>Increase flow by 1 unit</p>
</td></tr>
<tr><td class="compact">
<p><img src="graphs/reductions/diamond_flow-3-8-False-1.svg" class="center"></p>
</td><td class="compact">
<p><img src="graphs/reductions/diamond_flow-0-7-True-1.svg" class="center"></p>
</td></tr></table>


## Worst Case Ford-Fulkerson
<!-- day20 slide 49 -->

<table class="ford_fulk_worst_case">
<tr><td></td><td style="opacity:0;text-align:center" class="zero-bottom">
<p class='center'>Increase flow by 1 unit</p>
</td></tr>
<tr><td class="compact">
<p><img src="graphs/reductions/diamond_flow-0-8.svg" class="center"></p>
</td><td class="compact">
<p><img src="graphs/reductions/diamond_flow-0-9-True.svg" class="center"></p>
</td></tr></table>


## Worst Case Ford-Fulkerson
<!-- day20 slide 50 -->

<table class="ford_fulk_worst_case">
<tr><td></td><td style="opacity:1;text-align:center" class="zero-bottom">
::: {.fragment}
<p class='center'>Increase flow by 1 unit</p>
:::
</td></tr>
<tr><td class="compact">
<p><img src="graphs/reductions/diamond_flow-0-8.svg" class="center"></p>
</td><td class="compact">
<p><img src="graphs/reductions/diamond_flow-0-9-True-2.svg" class="center"></p>
</td></tr></table>


## Worst Case Ford-Fulkerson
<!-- day20 slide 51 -->

<table class="ford_fulk_worst_case">
<tr><td></td><td style="opacity:1;text-align:center" class="zero-bottom">
<p class='center'>Increase flow by 1 unit</p>
</td></tr>
<tr><td class="compact">
<p><img src="graphs/reductions/diamond_flow-4-10-True-2.svg" class="center"></p>
</td><td class="compact">
<p><img src="graphs/reductions/diamond_flow-0-9-True-2.svg" class="center"></p>
</td></tr></table>


## Worst Case Ford-Fulkerson
<!-- day20 slide 52 -->

<table class="ford_fulk_worst_case">
<tr><td></td><td style="opacity:0;text-align:center" class="zero-bottom">
<p class='center'>Increase flow by 1 unit</p>
</td></tr>
<tr><td class="compact">
<p><img src="graphs/reductions/diamond_flow-0-10.svg" class="center"></p>
</td><td class="compact">
<p><img src="graphs/reductions/diamond_flow-0-11-True.svg" class="center"></p>
</td></tr></table>



## Worst Case Ford-Fulkerson
<!-- day20 slide 53 -->

<table class="ford_fulk_worst_case">
<tr><td></td><td style="opacity:0;text-align:center" class="zero-bottom">
<p class='center'>Increase flow by 1 unit</p>
</td></tr>
<tr><td class="compact">
<p><img src="graphs/reductions/diamond_flow-0-10.svg" class="center"></p>
</td><td class="compact">
<p><img src="graphs/reductions/diamond_flow-0-11-True-1.svg" class="center"></p>
</td></tr></table>

<span class='bold'>Observation:</span> each iteration increases flow by 1 unit

<span class='bold'>Total number of iterations:</span> $|f^*|=200$





## Ford-Fulkerson Running Time

<p class="font-75">Define an augmenting path to be an ${\color{purple}s} \rightarrow {\color{Blue}t}$ path in the residual graph $G_{\color{red}f}$ (using edges of non-zero weight)</p>

<table class="width-100 font-75"><tr><td style="padding-left:0;padding-top:0" colspan='2'>

::: {.r-stack}
<div style="opacity:0">
<p>Ford-Fulkerson max-flow algorithm:</p>
<ul>
<li class='purple'>Initialize ${\color{red}f(e)}=0$ for all all $e \in E$</li>
<li class=''>Construct the residual network $G_{\color{red}f}$</li>
<li class=''>While there is an augmenting path $p$ in $G_{\color{red}f}$:<ul>
 <li>Let $c=\min_{e \in E}c_f(e)$ where $c_f(e)$ is the weight of edge $e$ in the residual network $G_{\color{red}f}$</li>
 <li>Add $c$ units of flow to $G$ based on the augmenting path $p$</li>
 <li>Update the residual network $G_{\color{red}f}$ for the updated flow</li></ul></li>
</ul>
</div>

<table class="navynote reduction-center-message" style="opacity:1"><tr><td>
<p>How many iterations are needed?</p>
- For integer-valued capacities, min-weight of each augmenting path is 1, so number of iterations is bounded by $|f^*|$, where $|f^*|$ is max-flow in $G$
- For rational-valued capacities, can scale to make capacities integer
- For irrational-valued capacities, algorithm may never terminate!
</td></tr></table>

<table class="navynote reduction-center-message" style="opacity:0"><tr><td>
<p>For graphs with integer capacities, running time of Ford-Fulkerson is</p><p>$$O(|f^*| \cdot |E|)$$</p>
<p>Highly undesirable if $|f^*| >> |E|$ (e.g., graph is small, but capacities are $\approx 2^{32}$)</p>
<p>As described, algorithm is <span class="und">not</span> polynomial-time!</p>
</td></tr></table>

:::

</td></tr>

<tr><td class="zero-bottom" style="width:45%;padding-left:0;padding-top:0">

<span class="bold">Initialization:</span> $O(|E|)$

<p style="margin-bottom:6px"><span style="opacity:1"><span class="bold">Construct residual network:</span> $O(|E|)$</span></span></p>

</td><td class="zero-bottom"> <table class="navynote" style="opacity:0"><tr><td class="font-70">We only care about nodes reachable from the source $s$, so the number of nodes that are "relevant" is at most $|E|$</td></tr></table> </td></tr>

<tr><td colspan='2' style="padding-left:0;padding-top:0px">
<p style="margin-top:0"><span style="opacity:1"><span class="bold">Finding *one* augmenting path in residual network:</span> $O(|E|)$ using BFS/DFS</span></p>

</td></tr>
</table>



## Ford-Fulkerson Running Time

<p class="font-75">Define an augmenting path to be an ${\color{purple}s} \rightarrow {\color{Blue}t}$ path in the residual graph $G_{\color{red}f}$ (using edges of non-zero weight)</p>

<table class="width-100 font-75"><tr><td style="padding-left:0;padding-top:0" colspan='2'>

::: {.r-stack}
<div style="opacity:0">
<p>Ford-Fulkerson max-flow algorithm:</p>
<ul>
<li class='purple'>Initialize ${\color{red}f(e)}=0$ for all all $e \in E$</li>
<li class=''>Construct the residual network $G_{\color{red}f}$</li>
<li class=''>While there is an augmenting path $p$ in $G_{\color{red}f}$:<ul>
 <li>Let $c=\min_{e \in E}c_f(e)$ where $c_f(e)$ is the weight of edge $e$ in the residual network $G_{\color{red}f}$</li>
 <li>Add $c$ units of flow to $G$ based on the augmenting path $p$</li>
 <li>Update the residual network $G_{\color{red}f}$ for the updated flow</li></ul></li>
</ul>
</div>

<table class="navynote reduction-center-message" style="opacity:0"><tr><td>
<p>How many iterations are needed?</p>
- For integer-valued capacities, min-weight of each augmenting path is 1, so number of iterations is bounded by $|f^*|$, where $|f^*|$ is max-flow in $G$
- For rational-valued capacities, can scale to make capacities integer
- For irrational-valued capacities, algorithm may never terminate!
</td></tr></table>

<table class="navynote reduction-center-message" style="opacity:1"><tr><td>
<p>For graphs with integer capacities, running time of Ford-Fulkerson is</p><p>$$O(|f^*| \cdot |E|)$$</p>
<p>Highly undesirable if $|f^*| >> |E|$ (e.g., graph is small, but capacities are $\approx 2^{32}$)</p>
<p>As described, algorithm is <span class="und">not</span> polynomial-time!</p>
</td></tr></table>

:::

</td></tr>

<tr><td class="zero-bottom" style="width:45%;padding-left:0;padding-top:0">

<span class="bold">Initialization:</span> $O(|E|)$

<p style="margin-bottom:6px"><span style="opacity:1"><span class="bold">Construct residual network:</span> $O(|E|)$</span></span></p>

</td><td class="zero-bottom"> <table class="navynote" style="opacity:0"><tr><td class="font-70">We only care about nodes reachable from the source $s$, so the number of nodes that are "relevant" is at most $|E|$</td></tr></table> </td></tr>

<tr><td colspan='2' style="padding-left:0;padding-top:0px">
<p style="margin-top:0"><span style="opacity:1"><span class="bold">Finding *one* augmenting path in residual network:</span> $O(|E|)$ using BFS/DFS</span></p>

</td></tr>
</table>



## Can We Avoid This?

<div class="font-80">

<span class='bold'>Edmonds-Karp Algorithm:</span> <span class='green'>choose augmenting path with fewest hops</span>

<span class='bold'>Running time:</span> $\Theta\left(|E| \cdot |f^*|,|V| \cdot |E|^2 \right) = O\left(|V| \cdot |E|^2 \right)$

<table style="width:100%"><tr><td style="padding:0">

Ford-Fulkerson max-flow algorithm:

- Initialize ${\color{red}f(e)}=0$ for all $e \in E$
- Construct the residual network $G_{\color{red}f}$

</td><td>

<table class="navynote"><tr><td class="center font-80">

How to find this? With BFS!

Edmonds-Karp = Ford-Fulkerson<br>using BFS to find augmenting path

</td></tr></table>

</td></tr><tr><td style="padding:0" colspan='2'>

- While there is an augmenting path in $G_{\color{red}f}$, <span class='green'>let $p$ be the path with fewest hops:</span>
	- Let $c=\min_{e \in E}c_f(e)$ where $c_f(e)$ is the weight of edge $e$ in the residual network $G_{\color{red}f}$</li>
	- Add $c$ units of flow to $G$ based on the augmenting path $p$
	- Update the residual network $G_{\color{red}f}$ for the updated flow
</td></tr></table>

See CLRS, chapter 24

</div>




# Max flow / Min cut <!-- from day21.pptx -->

::: {.titlereading}
Readings in CLRS 4th edition: chapter 24
:::


## Reminder: Graph Cuts
<!-- day21 slide 7 -->

<div class="font-85">

<p class='center'>A <span class='bold'>cut</span> of a graph $G=(V,E)$ is a partition<br>of the nodes into two sets, $\color{brown}S$ and $\color{cornflowerblue}V-S$</p>

::: {.r-stack}

::: {.svg-70}
<img src="graphs/graph_cut.svg" class="center">
:::

<table class="compact" style="margin-right:0;margin-bottom:0"><tr><td>
::: {.fragment fragment-index=3}
<table class="navynote"><tr><td class="font-90" style="text-align:center"><p style="margin:0 12px 0 12px">Notion extends naturally<br>to a set of edges</p></td></tr></table>
:::
</td></tr></table>

:::

<table style="width:100%"><tr><td style="width:50%;margin:0">
::: {.fragment fragment-index=1}
<p class="center">An edge $\color{purple}(v_1,v_2) \in E$ <span class="purple und">crosses</span> a<br>cut if $v_1 \in S$ and $v_2 \in V-S$</p>
:::
</td><td style="margin:0">
::: {.fragment fragment-index=2}
<p class="center">An edge $\color{green}(v_1,v_2) \in E$ <span class="green und">respects</span> a<br>cut if $v_1,v_2 \in S$ or $_1,v_2 \in V-S$</p>
:::
</td></tr></table>

</div>



## [Showing Correctness of Ford-Fulkerson]{.r-fit-text}
<!-- day 21 slide 8 -->

<div class="font-80">

- Consider cuts which separate nodes $\color{purple}s$ and $\color{Blue}t$
  - Let ${\color{purple}s} \in {\color{magenta}S}, {\color{Blue}t} \in {\color{skyblue}T}$ such that $V={\color{magenta}S} \bigcup {\color{skyblue}T}$
- Cost of cut $({\color{magenta}S}, {\color{skyblue}T}) = ||{\color{magenta}S}, {\color{skyblue}T} ||$
  - Sum <span class='bold'>capacities</span> of <span class='green'>edges</span> which go from ${\color{magenta}S}$ to ${\color{skyblue}T}$
  - This example: 5

</div>


<table class="compact width-100" style="height:50%"><tr><td>
<p style="text-align:center;margin:0"><img src="graphs/reductions/flow_graph-1-False-0-True-1.svg" style="width:65%;margin:0"></p>
</td></tr></table>


## Maxflow $\le$ MinCut

<!-- day 21 slide 9 -->

<div class="font-80">

- Max flow upper bounded by any cut separating $\color{purple}s$ and $\color{Blue}t$
- Why? "Conservation of flow"
  - All flow exiting $\color{purple}s$ must eventually get to $\color{Blue}t$
  - To get from $\color{purple}s$ to $\color{Blue}t$, all "pipes" must cross the cut
- Conclusion: if we find the minimum-cost cut, we've found the max flow
  - $\max_f|f| \le \min_{ {\color{magenta}S}, {\color{skyblue}T}}||{\color{magenta}S}, {\color{skyblue}T}||$

</div>

<table class="compact width-100" style="height:50%;margin-top:-47px"><tr><td>
<p style="text-align:center;margin:0"><img src="graphs/reductions/flow_graph-1-False-0-True-1.svg" style="width:65%;margin:0"></p>
</td></tr></table>


## Maxflow/Mincut Theorem

- To show Ford-Fulkerson is correct:
    - Show that when there are no more augmenting paths, there is a cut with cost equal to the flow
- Conclusion: the maximum flow through a network matches the minimum-cost cut
  - $\max_f|f| \le \min_{ {\color{magenta}S}, {\color{skyblue}T}}||{\color{magenta}S}, {\color{skyblue}T}||$
- Duality
    - When we've maximized max flow, we've minimized min cut (and vice-versa), so we can check when we've found one by finding the other



## Example: Maxflow/Mincut

<table class="width-100">
<tr><td style="text-align:center">Flow Graph $G$</td><td style="text-align:center">Residual graph $G_{\color{red}f}$</td></tr>
<tr><td class="compact" style="width:50%">
::: {.svg-100}
<img src="graphs/reductions/flow_graph-3-False-0-True-2.svg" style="width:80%;margin:0 auto 0 auto" class="center">
:::
</td><td class="compact">
::: {.svg-100}
<img src="graphs/reductions/flow_graph-3-True.svg" style="margin:0 auto 0 auto" class="center">
:::
</td></tr>

<tr><td style="text-align:center">$|f|=4$</td><td style="text-align:center">No more augmenting paths</td></tr>
<tr><td style="text-align:center">$||{\color{magenta}S}, {\color{skyblue}T} ||=4$</td><td style="text-align:center"></td></tr>

</td></tr></table>

::: {.fragment}
<p class="center">Idea: When there are no more augmenting paths, there<br>exists a cut in the graph with cost matching the flow</p>
:::



## Proof: Maxflow/Mincut Theorem

<div class="font-80">

- If $|f|$ is a max flow, then $G_{\color{red}f}$ has no augmenting path
    - Otherwise, use that augmenting path to "push" more flow
- Define ${\color{magenta}S}=$ nodes reachable from source node $\color{purple}s$ by positive-weight edges in the residual graph
    - ${\color{skyblue}T}=V-{\color{magenta}S}$
    - ${\color{magenta}S}$ separates ${\color{purple}s},{\color{Blue}t}$ (otherwise there's an augmenting path)

</div>


<table class="bottom width-100 font-90">
<tr><td style="text-align:center">Flow Graph $G$</td><td style="text-align:center">Residual graph $G_{\color{red}f}$</td></tr>
<tr><td class="compact" style="width:50%">
::: {.svg-100}
<img src="graphs/reductions/flow_graph-3-False-0-True-4.svg" style="width:100%;margin:0 auto 0 auto" class="center">
:::
</td><td class="compact">
::: {.svg-100}
<img src="graphs/reductions/flow_graph-3-True-0-True-4.svg" style="width:100%;margin:0 auto 0 auto" class="center">
:::
</td></tr></table>



## Proof: Maxflow/Mincut Theorem

<div class="font-70">

- To show: $||{\color{magenta}S},{\color{skyblue}T}||=|f|$
    - Weight of the cut matches the flow across the cut
- Consider "forward" edge $\color{forestgreen}(u,v)$ with $u \in {\color{magenta}S},v \in {\color{skyblue}T}$
    - ${\color{red}f(u,v)}={\color{forestgreen}c(u,v)}$ because otherwise ${\color{forestgreen}w(u,v)}>0$ in $G_{\color{red}f}$, which would mean $v \in {\color{magenta}S}$
- Consider "reverse" edge $\color{brown}(y,x)$ with $y \in {\color{skyblue}T}, x \in {\color{magenta}S}$
    - ${\color{red}f(y,x)}=0$ because otherwise the back edge ${\color{brown}w(y,x)}>0$ in $G_{\color{red}f}$, which would mean $y \in {\color{magenta}S}$

</div>

<table class="bottom width-100 font-90">
<tr><td style="text-align:center">Flow Graph $G$</td><td style="text-align:center">Residual graph $G_{\color{red}f}$</td></tr>
<tr><td class="compact" style="width:50%">
::: {.svg-100}
<img src="graphs/reductions/flow_graph-3-False-0-True-3.svg" style="width:100%;margin:0 auto 0 auto" class="center">
:::
</td><td class="compact">
::: {.svg-100}
<img src="graphs/reductions/flow_graph-3-True-0-True-3.svg" style="width:100%;margin:0 auto 0 auto" class="center">
:::
</td></tr></table>



## Proof Summary

1. The flow $|f|$ of $G$ is upper-bounded by the sum of capacities of edges crossing any cut separating source ${\color{purple}s}$ and sink ${\color{Blue}t}$
2. When Ford-Fulkerson terminates, there are no more augmenting paths in $G_{\color{red}f}$
3. When there are no more augmenting paths in $G_{\color{red}f}$ then we can define a cut ${\color{magenta}S}=\{$ nodes reachable from source node ${\color{purple}s}\}$ by positive-weight edges in the residual graph
4. The sum of edge capacities crossing this cut must match the flow of the graph
5. Therefore this flow is maximal


# Bipartite Matching <!-- from day21.pptx -->

::: {.titlereading}
Readings in CLRS 4th edition: chapter 25
:::


## Edge-Disjoint Paths

Given a graph $G=(V,E)$, a start node ${\color{purple}s}$ and a destination node ${\color{Blue}t}$, give the maximum number of paths from ${\color{purple}s}$ to ${\color{Blue}t}$ which share no edges

<p>&nbsp;</p>

::: {.svg-100 .bottom style="width:75%;left:12.5%"}
<img src="graphs/reductions/edge_disjoint_graph.svg">
:::



## Edge-Disjoint Paths

Given a graph $G=(V,E)$, a start node ${\color{purple}s}$ and a destination node ${\color{Blue}t}$, give the maximum number of paths from ${\color{purple}s}$ to ${\color{Blue}t}$ which share no edges

::: {.r-stack}

::: {.width-100}
- Set of edge-disjoint paths of size 3:
:::

:::

::: {.svg-100 .bottom style="width:75%;left:12.5%"}
<img src="graphs/reductions/edge_disjoint_graph-1.svg">
:::


## Edge-Disjoint Paths

Given a graph $G=(V,E)$, a start node ${\color{purple}s}$ and a destination node ${\color{Blue}t}$, give the maximum number of paths from ${\color{purple}s}$ to ${\color{Blue}t}$ which share no edges

<div class="width-100 left" style="text-align:left !important">
::: {.r-stack}

::: {.fragment .fade-out fragment-index=1 .width-100}
- Set of edge-disjoint paths of size 4:
:::

::: {.fragment fragment-index=1 .width-100}
- How could we solve this?
:::

:::
</div>

::: {.svg-100 .bottom style="width:75%;left:12.5%"}
<img src="graphs/reductions/edge_disjoint_graph-2.svg">
:::



## Edge-Disjoint Paths

Make ${\color{purple}s}$ and ${\color{Blue}t}$ the source and sink, give each edge capacity 1, find the max flow.

::: {style="opacity:0"}
- Set of edge-disjoint paths of size 4
- Max flow = 4
:::

::: {.svg-100 .bottom style="width:75%;left:12.5%"}
<img src="graphs/reductions/edge_disjoint_graph-0-2.svg">
:::



## Edge-Disjoint Paths

Make ${\color{purple}s}$ and ${\color{Blue}t}$ the source and sink, give each edge capacity 1, find the max flow.

::: {}
- Set of edge-disjoint paths of size 4
- Max flow = 4
:::

::: {.svg-100 .bottom style="width:75%;left:12.5%"}
<img src="graphs/reductions/edge_disjoint_graph-2-1.svg">
:::



## Vertex-Disjoint Paths

Given a graph $G=(V,E)$, a start node ${\color{purple}s}$ and a destination node ${\color{Blue}t}$, give the maximum number of paths from ${\color{purple}s}$ to ${\color{Blue}t}$ which share no vertices

<p>&nbsp;</p>

::: {.svg-100 .bottom style="width:75%;left:12.5%"}
<img src="graphs/reductions/edge_disjoint_graph.svg">
:::



## Vertex-Disjoint Paths

Given a graph $G=(V,E)$, a start node ${\color{purple}s}$ and a destination node ${\color{Blue}t}$, give the maximum number of paths from ${\color{purple}s}$ to ${\color{Blue}t}$ which share no vertices

::: {.r-stack}
::: {.width-100}
- Not a vertex-disjoint path!
:::
:::

::: {.svg-100 .bottom style="width:75%;left:12.5%"}
<img src="graphs/reductions/edge_disjoint_graph-1.svg">
:::


## Vertex-Disjoint Paths

Given a graph $G=(V,E)$, a start node ${\color{purple}s}$ and a destination node ${\color{Blue}t}$, give the maximum number of paths from ${\color{purple}s}$ to ${\color{Blue}t}$ which share no vertices

<div class="width-100 left" style="text-align:left !important">
::: {.r-stack}

::: {.fragment .fade-out fragment-index=1 .width-100}
- Not a vertex-disjoint path!
:::

::: {.fragment fragment-index=1 .width-100}
- How could we solve this?
:::

:::
</div>

::: {.svg-100 .bottom style="width:75%;left:12.5%"}
<img src="graphs/reductions/edge_disjoint_graph-1-0-True.svg">
:::



## Vertex-Disjoint Paths

<div class="font-80">

Idea: Convert an instance of the vertex-disjoint paths problem into an instance of edge-disjoint paths

::: {.fragment fragment-index=2}
::: {.svg-100 .bottom style="float:right"}
<img src="graphs/reductions/vertex_disjoint_to_edge_disjoint.svg" style="margin-top:-100px;margin-bottom:-100px">
:::
:::

::: {.fragment fragment-index=1}
Make two copies of each node, one connected to incoming edges, the other to outgoing edges
:::

::: {.fragment fragment-index=3}
Compute <span class='bold'>Edge-Disjoint Paths</span> on new graph
:::

</div>

::: {.svg-100 .bottom style="width:75%;left:12.5%"}
<img src="graphs/reductions/edge_disjoint_graph-1.svg">
:::





## Maximum Bipartite Matching

```{python}
#| output: asis
print_bipartite_graph(50,0)
```


## Maximum Bipartite Matching

```{python}
#| output: asis
print_bipartite_graph(50,1)
```


## Maximum Bipartite Matching

```{python}
#| output: asis
print_bipartite_graph(50,2)
```


## Maximum Bipartite Matching

```{python}
#| output: asis
print_bipartite_graph(50,3)
```


## Maximum Bipartite Matching

&nbsp;

- Given a graph $G=(L,R,E)$
    - A set of left nodes, right nodes, and edges between left and right
- Find the largest set of edges $M \subseteq E$ such that each node $u \in L$ or $v \in R$ is incident to at most one edge



## Maximum Bipartite Matching

<table style="width:100%"><tr><td style="width:62.5%;height:100%">

```{python}
#| output: asis
print_bipartite_graph(80,0)
```

</td><td style="vertical-align:middle"><p style="text-align:center">How could<br>we solve</br>this?</p></td></tr></table>



## [Maximum Bipartite Matching Using Max Flow]{.r-fit-text}

Make $G=(L,R,E)$ a flow network $G=(V,E)$ by:

<table><tr><td style="width:60%">

<table class="compact bipart2_outer"><tr><td><div>
::: {.r-stack}
<table class="bipart2"><tr>
<td>&nbsp;</td><td><table>
<tr><td><svg viewBox="0 0 80 20"><text x="0" y="15">Professors</text></svg></td></tr>
<tr><td><div> ![](https://engineering.virginia.edu/sites/default/files/styles/square_xxsml/public/Headshot.webp?itok=5IwaFPya) </div></td></tr>
<tr><td><div> ![](https://engineering.virginia.edu/sites/default/files/styles/square_xxsml/public/2024-07/RobbieHott-2023.JPG?h=83d1c70a&itok=kpjw11sp) </div></td></tr>
<tr><td><div> ![](https://engineering.virginia.edu/sites/default/files/styles/square_xxsml/public/Pettit3.JPG?h=7d5d1757&itok=jvoP0ymk) </div></td></tr>
<tr><td><div> ![](https://www.cs.virginia.edu/~asb/images/me.jpg) </div></td></tr>
</table></td><td>&nbsp;</td><td><table>
<tr><td><svg viewBox="0 0 80 20"><text x="16" y="15">Dogs</text></svg></td></tr>
<tr><td><div> ![](https://upload.wikimedia.org/wikipedia/commons/thumb/a/a7/Sobaka_Husky.JPG/940px-Sobaka_Husky.JPG) </div></td></tr>
<tr><td><div> ![](https://upload.wikimedia.org/wikipedia/commons/thumb/e/e4/Labrador_Retriever_snow.jpg/1196px-Labrador_Retriever_snow.jpg) </div></td></tr>
<tr><td><div> ![](https://upload.wikimedia.org/wikipedia/commons/f/f4/MiniDachshund1_wb.jpg) </div></td></tr>
<tr><td><div> ![](https://upload.wikimedia.org/wikipedia/commons/thumb/6/65/Jonangi.jpg/1280px-Jonangi.jpg) </div></td></tr>
</table></td><td>&nbsp;</td></tr></table>
<p><img src="graphs/reductions/bipartite_graph-0-True-1.svg"></p>
:::
</div></td></tr></table>

</td><td style="vertical-align:top" class="font-80">

- Adding in a <span class='purple'>source</span> and <span class='navy'>sink</span> to the set of nodes: 
  - $V'=L \bigcup R \bigcup \{ {\color{purple}s},{\color{Blue}t}\}$
- Adding an edge from <span class='purple'>source</span> to $L$ and from $R$ to <span class='navy'>sink</span>:
   - $E'=E \bigcup \{u \in L | ({\color{purple}s},u)\}$ $\bigcup \{v \in R | (v,{\color{Blue}t})\}$
- Make each edge cap 1:
    - $\forall e \in E', c(e)=1$

</td></tr></table>




## [Maximum Bipartite Matching Using Max Flow]{.r-fit-text}

Make $G=(L,R,E)$ a flow network $G=(V,E)$ by:

<table><tr><td style="width:60%">

<table class="compact bipart2_outer"><tr><td><div>
::: {.r-stack}
<table class="bipart2"><tr>
<td>&nbsp;</td><td><table>
<tr><td><svg viewBox="0 0 80 20"><text x="0" y="15">Professors</text></svg></td></tr>
<tr><td><div> ![](https://engineering.virginia.edu/sites/default/files/styles/square_xxsml/public/Headshot.webp?itok=5IwaFPya) </div></td></tr>
<tr><td><div> ![](https://engineering.virginia.edu/sites/default/files/styles/square_xxsml/public/2024-07/RobbieHott-2023.JPG?h=83d1c70a&itok=kpjw11sp) </div></td></tr>
<tr><td><div> ![](https://engineering.virginia.edu/sites/default/files/styles/square_xxsml/public/Pettit3.JPG?h=7d5d1757&itok=jvoP0ymk) </div></td></tr>
<tr><td><div> ![](https://www.cs.virginia.edu/~asb/images/me.jpg) </div></td></tr>
</table></td><td>&nbsp;</td><td><table>
<tr><td><svg viewBox="0 0 80 20"><text x="16" y="15">Dogs</text></svg></td></tr>
<tr><td><div> ![](https://upload.wikimedia.org/wikipedia/commons/thumb/a/a7/Sobaka_Husky.JPG/940px-Sobaka_Husky.JPG) </div></td></tr>
<tr><td><div> ![](https://upload.wikimedia.org/wikipedia/commons/thumb/e/e4/Labrador_Retriever_snow.jpg/1196px-Labrador_Retriever_snow.jpg) </div></td></tr>
<tr><td><div> ![](https://upload.wikimedia.org/wikipedia/commons/f/f4/MiniDachshund1_wb.jpg) </div></td></tr>
<tr><td><div> ![](https://upload.wikimedia.org/wikipedia/commons/thumb/6/65/Jonangi.jpg/1280px-Jonangi.jpg) </div></td></tr>
</table></td><td>&nbsp;</td></tr></table>
<p><img src="graphs/reductions/bipartite_graph-3-True-2.svg"></p>
:::
</div></td></tr></table>

</td><td style="vertical-align:top" class="font-80">

::: {.no-second-bullets}
- Make $G$ into $G'$
  - [$\color{red}\Theta(L+R)$]{.fragment}
- Compute Max Flow on $G'$
  - [$\color{red}\Theta(E \cdot V)$ since $|f| \le L$]{.fragment}
- Return $M$ as "middle" edges with flow 1
  - [$\color{red}\Theta(L+R)$]{.fragment}
:::

<span class='red fragment'>Total: $\Theta(E \cdot V)$</span>

</td></tr></table>





# Reductions <!-- from day22.pptx and day23.pptx -->

::: {.titlereading}
Readings in CLRS 4th edition: N/A (reductions are covered<br>in CLRS, but not in a context we are studying in CS 3100)
:::


## Reductions

&nbsp;

- Algorithm technique of supreme ultimate power
- Convert instance of problem A to an instance of Problem B
- Convert solution of problem B back to a solution of problem&nbsp;A


## Reductions

::: {.notes}
- MacGyver, season 7 (1992), episode 11: "Gunz 'N Boys"
- [https://www.amazon.com/The-Stinger/dp/B007TWBT52/](https://www.amazon.com/The-Stinger/dp/B007TWBT52/)
- Hit on the head at 19:42
- Door is locked at 20:20, wakes up at 20:24
- Ends at 24:15
:::

<p style="text-align:center">Shows how two different problems relate to each other</p>

<table class='allcenter'>
<tr>
<td style="width:50%"><div class='red bold' style="transform:rotate(-10deg);width:0;margin:50px auto 0 20px;font-size:150%">MOVIE&nbsp;TIME!</div></td>
<td style="width:50%">![](https://upload.wikimedia.org/wikipedia/commons/5/52/MacGyver_Logo.svg){style="margin-top:-75px;margin-bottom:-75px"}</td>
</tr><tr>
<td>![](https://upload.wikimedia.org/wikipedia/commons/thumb/a/a9/Popcorn_in_bucket.jpg/692px-Popcorn_in_bucket.jpg){style="width:60%"}</td>
<td>![](https://upload.wikimedia.org/wikipedia/en/2/27/Macgyver.jpg)</td>
</tr></table>



## MacGyver's <span class='magenta'>Reduction</span>

::: {.notes}

- MacGyver, season 7 (1992), episode 11: "Gunz 'N Boys"
- [https://www.amazon.com/The-Stinger/dp/B007TWBT52/](https://www.amazon.com/The-Stinger/dp/B007TWBT52/)
- Hit on the head at 19:42
- Door is locked at 20:20, wakes up at 20:24
- Ends at 24:15
:::


<table class='font-70 allcenter compact' style="vertical-align:top">

<tr class='font-70'><td colspan=2 class="und"><span class='fragment' fragment-index=1>Problem we don't know how to solve</span></td><td></td><td></td><td colspan=2 class="und"><span class='fragment' fragment-index=2>Problem we do know how to solve</span></td></tr>

<tr><td style="vertical-align:top;width:10%">
::: {.svg-100 .no-svg-margins .fragment fragment-index=1}
<img src="graphs/reductions/red_A_cylinder.svg">
:::
</td>

<td style="vertical-align:top;width:25%;padding-right:10px !important">
<table class='compact allcenter'>
<tr><td><span class="fragment" fragment-index=1>Opening a door</span></td></tr>
<tr><td> ![](https://upload.wikimedia.org/wikipedia/commons/f/f6/Door-liftarn-Door-white-stroke.svg){.fragment fragment-index=1 style="width:30%"} </td></tr>
<tr><td>&nbsp;</td></tr>
<tr><td>&nbsp;</td></tr>
<tr><td><span class='fragment' fragment-index=7>Solution for $A$:</span></td></tr>
<tr><td style="padding-bottom:10px !important"><span class='fragment' fragment-index=7>Keg cannon<br>battering ram</span></td></tr>
<tr><td style="vertical-align:top;text-align:center">
::: {.r-stack .fragment fragment-index=7}
<p style="margin:0;z-index:0"> ![](https://webstockreview.net/images/clipart-flames-svg-3.png){.center style="padding-bottom:80px;transform:rotate(180deg);width:30%;"} </p>
<p style="margin:0;z-index:1"> ![](https://clipground.com/images/beer-keg-clipart-20.jpg){.center style="width:30%"} </p>
:::
</td></tr></table>


</td>

<td colspan=2 style="vertical-align:top">

::: {.r-stack}

<table class="compact fragment" style="width:100%;height:50vh"><tr><td style="width:30%;border:2px solid black;background-color:plum;vertical-align:bottom;text-align:center">Reduction</td></tr></table>

<div>
::: {.svg-60 .no-svg-margins style="padding: 0 10px 0 10px !important" .fragment fragment-index=3}
<img src="graphs/reductions/rarrow.svg">
:::
<p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p>
::: {.svg-60 .no-svg-margins style="padding: 0 10px 0 10px !important" .fragment fragment-index=6}
<img src="graphs/reductions/larrow.svg">
:::
</div>
:::

</td>


<td style="vertical-align:top;width:10%;padding-left:10px !important">
::: {.svg-100 .no-svg-margins .fragment fragment-index=2}
<img src="graphs/reductions/yellow_B_box.svg">
:::
</td>

<td style="vertical-align:top;width:25%">

<table class='compact'>
<tr><td><span class="fragment" fragment-index=2>Lighting a fire</span></td></tr>
<tr><td> ![](http://www.clipartbest.com/cliparts/4T9/E9X/4T9E9XEjc.png){.center  .fragment fragment-index=2 style="width:50%;height:20%;margin-top:-20px"} </td></tr>
<tr><td>&nbsp;</td></tr>
<tr><td>
::: {.r-stack}
<p style="text-align:center" class="fragment" data-fragment-index=4><img src="graphs/reductions/darrow.svg" class="svg-60 no-svg-margins" style="margin:auto !important"></p>

<p style="text-align:center" class="fragment" data-fragment-index=4>How?</p>
:::
</td></tr>
<tr><td><span class="fragment" fragment-index=5>Solution for $B$:</span></td></tr>
<tr><td><span class="fragment" fragment-index=5>Alcohol, wood, matches</span></td></tr>
<tr><td>
::: {.r-stack .fragment fragment-index=5}
![](https://clipground.com/images/wood-picture-clipart-5.jpg){style="width:40%"}

![](https://clipground.com/images/whiskey-bottle-clip-art-15.png){style="width:20%;padding-left:110px"}

![](https://clipart-library.com/8300/2368/matches-clipart-xl.png){style="width:30%;padding-left:170px"}
:::
</td></tr>
</table>

</td>
</tr>

</table>





## Bipartite Matching <span class='magenta'>Reduction</span>


<table class='font-70 allcenter compact' style="vertical-align:top">

<tr class='font-70'><td colspan=2 class="und"><span class='fragment' data-fragment-index=1>Problem we don't know how to solve</span></td><td></td><td></td><td colspan=2 class="und"><span class='fragment' data-fragment-index=2>Problem we do know how to solve</span></td></tr>

<tr><td style="vertical-align:top;width:10%">
::: {.svg-100 .no-svg-margins .fragment data-fragment-index=1}
<img src="graphs/reductions/red_A_cylinder.svg">
:::
</td>

<td style="vertical-align:top;width:25%;padding-right:10px !important">
<table class='compact allcenter'>
<tr><td><span class="fragment" data-fragment-index=1>Bipartite Matching</span></td></tr>
<tr><td> 

::: {.fragment data-fragment-index=1}
```{python}
#| output: asis
print_bipartite_graph(80,0)
```
:::

<tr><td>&nbsp;</td></tr>
<tr><td><span class='fragment' data-fragment-index=7>Solution for $A$:</span></td></tr>
<tr><td style="vertical-align:top;text-align:center">

::: {.fragment data-fragment-index=7}
```{python}
#| output: asis
print_bipartite_graph(80,3)
```
:::

</td></tr></table>

</td>

<td colspan=2 style="vertical-align:top">

::: {.r-stack}

<table class="compact fragment" data-fragment-index=8 style="width:100%;height:100%"><tr><td style="width:30%;border:2px solid black;background-color:plum;vertical-align:bottom;text-align:center">&nbsp;</td></tr></table>

<table class="compact" style="z-index:1;opacity:0.5"><tr><td>
::: {.fragment data-fragment-index=3}

<table class="compact bipart2_outer"><tr><td><div>
::: {.r-stack}
<table class="bipart2"><tr>
<td>&nbsp;</td><td><table>
<tr><td><svg viewBox="0 0 80 20"><text x="0" y="15">Professors</text></svg></td></tr>
<tr><td><div> ![](https://engineering.virginia.edu/sites/default/files/styles/square_xxsml/public/Headshot.webp?itok=5IwaFPya) </div></td></tr>
<tr><td><div> ![](https://engineering.virginia.edu/sites/default/files/styles/square_xxsml/public/2024-07/RobbieHott-2023.JPG?h=83d1c70a&itok=kpjw11sp) </div></td></tr>
<tr><td><div> ![](https://engineering.virginia.edu/sites/default/files/styles/square_xxsml/public/Pettit3.JPG?h=7d5d1757&itok=jvoP0ymk) </div></td></tr>
<tr><td><div> ![](https://www.cs.virginia.edu/~asb/images/me.jpg) </div></td></tr>
</table></td><td>&nbsp;</td><td><table>
<tr><td><svg viewBox="0 0 80 20"><text x="16" y="15">Dogs</text></svg></td></tr>
<tr><td><div> ![](https://upload.wikimedia.org/wikipedia/commons/thumb/a/a7/Sobaka_Husky.JPG/940px-Sobaka_Husky.JPG) </div></td></tr>
<tr><td><div> ![](https://upload.wikimedia.org/wikipedia/commons/thumb/e/e4/Labrador_Retriever_snow.jpg/1196px-Labrador_Retriever_snow.jpg) </div></td></tr>
<tr><td><div> ![](https://upload.wikimedia.org/wikipedia/commons/f/f4/MiniDachshund1_wb.jpg) </div></td></tr>
<tr><td><div> ![](https://upload.wikimedia.org/wikipedia/commons/thumb/6/65/Jonangi.jpg/1280px-Jonangi.jpg) </div></td></tr>
</table></td><td>&nbsp;</td></tr></table>
<p><img src="graphs/reductions/bipartite_graph-0-True-1.svg"></p>
:::
</div></td></tr></table>

:::
</td></tr>
<tr><td style="opacity:1;z-index:6" class="fragment" data-fragment-index=8 >Reduction</td></tr>
<tr><td>
::: {.fragment data-fragment-index=6}

<table class="compact bipart2_outer"><tr><td><div>
::: {.r-stack}
<table class="bipart2"><tr>
<td>&nbsp;</td><td><table>
<tr><td><svg viewBox="0 0 80 20"><text x="0" y="15">Professors</text></svg></td></tr>
<tr><td><div> ![](https://engineering.virginia.edu/sites/default/files/styles/square_xxsml/public/Headshot.webp?itok=5IwaFPya) </div></td></tr>
<tr><td><div> ![](https://engineering.virginia.edu/sites/default/files/styles/square_xxsml/public/2024-07/RobbieHott-2023.JPG?h=83d1c70a&itok=kpjw11sp) </div></td></tr>
<tr><td><div> ![](https://engineering.virginia.edu/sites/default/files/styles/square_xxsml/public/Pettit3.JPG?h=7d5d1757&itok=jvoP0ymk) </div></td></tr>
<tr><td><div> ![](https://www.cs.virginia.edu/~asb/images/me.jpg) </div></td></tr>
</table></td><td>&nbsp;</td><td><table>
<tr><td><svg viewBox="0 0 80 20"><text x="16" y="15">Dogs</text></svg></td></tr>
<tr><td><div> ![](https://upload.wikimedia.org/wikipedia/commons/thumb/a/a7/Sobaka_Husky.JPG/940px-Sobaka_Husky.JPG) </div></td></tr>
<tr><td><div> ![](https://upload.wikimedia.org/wikipedia/commons/thumb/e/e4/Labrador_Retriever_snow.jpg/1196px-Labrador_Retriever_snow.jpg) </div></td></tr>
<tr><td><div> ![](https://upload.wikimedia.org/wikipedia/commons/f/f4/MiniDachshund1_wb.jpg) </div></td></tr>
<tr><td><div> ![](https://upload.wikimedia.org/wikipedia/commons/thumb/6/65/Jonangi.jpg/1280px-Jonangi.jpg) </div></td></tr>
</table></td><td>&nbsp;</td></tr></table>
<p><img src="graphs/reductions/bipartite_graph-3-True-2.svg"></p>
:::
</div></td></tr></table>

:::
</td></tr></table>

<div style="z-index:2">
::: {.svg-60 .no-svg-margins style="padding: 0 10px 0 10px !important" .fragment data-fragment-index=3}
<img src="graphs/reductions/rarrow.svg">
:::
<p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p>
::: {.svg-60 .no-svg-margins style="padding: 0 10px 0 10px !important" .fragment data-fragment-index=6}
<img src="graphs/reductions/larrow.svg" class="svg-100 no-svg-margins">
:::
</div>

:::

</td>


<td style="vertical-align:top;width:10%;padding-left:10px !important">
::: {.svg-100 .no-svg-margins .fragment data-fragment-index=2}
<img src="graphs/reductions/yellow_B_box.svg">
:::
</td>

<td style="vertical-align:top;width:25%">

<table class='compact'>
<tr><td><span class="fragment" data-fragment-index=2>Max Flow</span></td></tr>
 <tr><td> 

::: {.svg-100 .fragment data-fragment-index=2}
<img src="graphs/reductions/flow_graph-3.svg">
:::

</td></tr>
<tr><td>&nbsp;</td></tr>
<tr><td>
::: {.r-stack}
<p style="text-align:center" class="fragment" data-fragment-index=4><img src="graphs/reductions/darrow.svg" class="svg-60 no-svg-margins" style="margin:auto !important"></p>

::: {.fragment data-fragment-index=4}
<p style="z-index:5">Ford-Fulkerson</p>
:::
:::
</td></tr>
<tr><td>&nbsp;</td></tr>
<tr><td><span class="fragment" data-fragment-index=5>Solution for $B$:</span></td></tr>
<tr><td>

::: {.svg-100 .fragment data-fragment-index=5}
<img src="graphs/reductions/flow_graph-2-True-0-False.svg">
:::

</td></tr>
</table>

</td>
</tr>

</table>


   

## Edge Disjoint Paths <span class='magenta'>Reduction</span>

<table class='font-70 allcenter compact' style="vertical-align:top;height:90%">

<tr class='font-70' style="height:0"><td colspan=2 class="und"><span>Problem we don't know how to solve</span></td><td></td><td></td><td colspan=2 class="und"><span>Problem we do know how to solve</span></td></tr>
<tr>

<!-- this td contains the "A" cylinder and the final cylinder -->
<td style="vertical-align:top;width:10%">
::: {.svg-100 .no-svg-margins}
<img src="graphs/reductions/red_A_cylinder.svg">
:::
</td>

<!-- this td is the left column that contains the original problem and the final solution -->
<td style="vertical-align:top;width:25%;padding-right:10px !important">
<!-- this table contains the image on the left (the "source" problem) -->
<table class='compact allcenter'>
<tr><td><span>Edge Disjoint Paths</span></td></tr>
<tr><td>
<!-- the "source" image in the upper left -->
<img src="graphs/reductions/edge_disjoint_graph.svg">
</td></tr></table>
<!-- this table has the bottom-left image -->
<table class='compact allcenter' style="position:absolute;bottom:0;width:24%">
<tr><td><span>Solution for $A$:</span></td></tr>
<tr><td style="vertical-align:top;text-align:center">
<img src="graphs/reductions/edge_disjoint_graph-2.svg">
</td></tr></table>
</td>

<!-- this column contains the middle purple column and its contents -->
<td colspan=2 style="vertical-align:top;border:2px solid black;background-color:plum">

<!-- this table contains the center top right arrow and image -->
<table class='compact allcenter'><tr><td>
::: {.r-stack}
::: {.svg-60 .no-svg-margins style="padding: 0 10px 0 10px !important;z-index:2"}
<img src="graphs/reductions/rarrow.svg" class="svg-100 no-svg-margins">
:::
<img src="graphs/reductions/edge_disjoint_graph-0-1.svg" style="z-index:1">
:::
</td></tr></table>

<!-- this table contains the center bottom left arrow and image -->
<table class='compact allcenter' style="position:absolute;bottom:0;width:30%"><tr><td>
::: {.r-stack}
::: {.svg-60 .no-svg-margins style="padding: 0 10px 0 10px !important;z-index:2"}
<img src="graphs/reductions/larrow.svg" class="svg-100 no-svg-margins">
:::
<img src="graphs/reductions/edge_disjoint_graph-2-1.svg" style="z-index:1">
:::
</td></tr></table>

</td>

<!-- this contains the yellow problem-B box(es) -->
<td style="vertical-align:top;width:10%;padding-left:10px !important">
::: {.svg-100 .no-svg-margins}
<img src="graphs/reductions/yellow_B_box.svg">
:::
</td>

<!-- this td is the right column that reduced-to problem the reduced-to solution -->
<td style="vertical-align:top;width:25%">
<!-- this table contains both the upper-right image and the down arrow on the right -->
<table class='compact'>
<tr><td><span>Max Flow</span></td></tr>
<tr><td> 
::: {.svg-100}
<img src="graphs/reductions/flow_graph-3.svg">
:::
</td></tr>
<tr><td>
::: {.r-stack}
<p style="text-align:center"><img src="graphs/reductions/darrow.svg" class="svg-60 no-svg-margins" style="margin:auto !important"></p>

<p style="z-index:5">Ford-Fulkerson</p>
:::
</td></tr>
<tr><td>&nbsp;</td></tr>
</table>
<!-- this table has the bottom-right image -->
<table class='compact allcenter' style="position:absolute;bottom:0;width:24%">
<tr><td><span>Solution for $B$:</span></td></tr>
<tr><td>
::: {.svg-100}
<img src="graphs/reductions/flow_graph-2-True-0-False.svg">
:::
</td></tr></table>
</td>

</tr></table>





## Vertex Disjoint Paths <span class='magenta'>Reduction</span>

<table class='font-70 allcenter compact' style="vertical-align:top;height:90%">

<tr class='font-70' style="height:0"><td colspan=2 class="und"><span>Problem we don't know how to solve</span></td><td></td><td></td><td colspan=2 class="und"><span>Problem we do know how to solve</span></td></tr>
<tr>

<!-- this td contains the "A" cylinder and the final cylinder -->
<td style="vertical-align:top;width:10%">
::: {.svg-100 .no-svg-margins}
<img src="graphs/reductions/red_A_cylinder.svg">
:::
</td>

<!-- this td is the left column that contains the original problem and the final solution -->
<td style="vertical-align:top;width:25%;padding-right:10px !important">
<!-- this table contains the image on the left (the "source" problem) -->
<table class='compact allcenter'>
<tr><td><span>Vertex Disjoint Paths</span></td></tr>
<tr><td>
<!-- the "source" image in the upper left -->
<img src="graphs/reductions/edge_disjoint_graph.svg">
</td></tr></table>
<!-- this table has the bottom-left image -->
<table class='compact allcenter' style="position:absolute;bottom:0;width:24%">
<tr><td><span>Solution for $A$:</span></td></tr>
<tr><td style="vertical-align:top;text-align:center">
<img src="graphs/reductions/edge_disjoint_graph-2.svg">
</td></tr></table>
</td>

<!-- this column contains the middle purple column and its contents -->
<td colspan=2 style="vertical-align:top;border:2px solid black;background-color:plum">

<!-- this table contains the center top right arrow and image -->
<table class='compact allcenter'><tr><td>
::: {.r-stack}
<div class="svg-100 no-svg-margins" style="margin:0;z-index:2">
<img src="graphs/reductions/rarrow.svg" class="svg-100 no-svg-margins">
</div>

<img src="graphs/reductions/vertex_disjoint_to_edge_disjoint.svg" style="z-index:1">
:::
</td></tr></table>

<!-- this table contains the center bottom left arrow and image -->
<table class='compact allcenter' style="position:absolute;bottom:0;width:30%"><tr><td>
::: {.r-stack}
<div class="svg-100 no-svg-margins" style="margin:0;z-index:2">
<img src="graphs/reductions/larrow.svg" class="svg-100 no-svg-margins">
</div>

<img src="graphs/reductions/vertex_disjoint_to_edge_disjoint.svg" style="z-index:1">

<p>Merge these back</p>
:::
</td></tr></table>

</td>

<!-- this contains the yellow problem-B box(es) -->
<td style="vertical-align:top;width:10%;padding-left:10px !important">
::: {.svg-100 .no-svg-margins}
<img src="graphs/reductions/yellow_B_box.svg">
:::
</td>

<!-- this td is the right column that reduced-to problem the reduced-to solution -->
<td style="vertical-align:top;width:25%">
<!-- this table contains both the upper-right image and the down arrow on the right -->
<table class='compact'>
<tr><td><span>Edge Disjoint Paths</span></td></tr>
<tr><td> 
::: {.svg-100}
<img src="graphs/reductions/edge_disjoint_graph.svg">
:::
</td></tr>
<tr><td>
::: {.r-stack}
<p style="text-align:center"><img src="graphs/reductions/darrow.svg" class="svg-60 no-svg-margins" style="margin:auto !important"></p>

<p style="z-index:5">(another reduction)</p>
:::
</td></tr>
<tr><td>&nbsp;</td></tr>
</table>
<!-- this table has the bottom-right image -->
<table class='compact allcenter' style="position:absolute;bottom:0;width:24%">
<tr><td><span>Solution for $B$:</span></td></tr>
<tr><td>
::: {.svg-100}
<img src="graphs/reductions/edge_disjoint_graph-2.svg">
:::
</td></tr></table>
</td>

</tr></table>






## Vertex Disjoint Paths <span class='magenta'>Big Picture</span>

<table class='font-70 allcenter compact' style="vertical-align:top;height:90%">

<tr class='font-70' style="height:0">
<td colspan=2 class="und"><span>Problem we don't know how to solve</span></td><td></td><td></td>
<td colspan=2 class="und"><span>Problem we still don't know how to solve</span></td><td></td><td></td>
<td colspan=2 class="und"><span>Problem we do know how to solve</span></td></tr>
<tr>

<!-- this td contains the "A" cylinder and the final cylinder -->
<td style="vertical-align:top;width:5%">
::: {.svg-100 .no-svg-margins}
<img src="graphs/reductions/red_A_cylinder.svg">
:::
</td>

<!-- this td is the left column that contains the original problem and the final solution -->
<td style="vertical-align:top;width:15%;padding-right:10px !important">
<!-- this table contains the image on the left (the "source" problem) -->
<table class='compact allcenter'>
<tr><td><span>Vertex Disjoint Paths</span></td></tr>
<tr><td>
<!-- the "source" image in the upper left -->
<img src="graphs/reductions/edge_disjoint_graph.svg">
</td></tr></table>
<!-- this table has the bottom-left image -->
<table class='compact allcenter' style="position:absolute;bottom:0;width:14%">
<tr><td><span>Solution for $A$:</span></td></tr>
<tr><td style="vertical-align:top;text-align:center">
<img src="graphs/reductions/edge_disjoint_graph-2.svg">
</td></tr></table>
</td>

<!-- this column contains the middle purple column and its contents -->
<td colspan=2 style="vertical-align:top;border:2px solid black;background-color:plum;width:20%">

<!-- this table contains the center top right arrow and image -->
<table class='compact allcenter'><tr><td>
::: {.r-stack}
<div class="svg-100 no-svg-margins" style="margin:0;z-index:2">
<img src="graphs/reductions/rarrow.svg" class="svg-100 no-svg-margins">
</div>

<img src="graphs/reductions/vertex_disjoint_to_edge_disjoint.svg" style="z-index:1">
:::
</td></tr></table>

<!-- this table contains the center bottom left arrow and image -->
<table class='compact allcenter' style="position:absolute;bottom:0;width:20%"><tr><td>
::: {.r-stack}
<div class="svg-100 no-svg-margins" style="margin:0;z-index:2">
<img src="graphs/reductions/larrow.svg" class="svg-100 no-svg-margins">
</div>

<img src="graphs/reductions/vertex_disjoint_to_edge_disjoint.svg" style="z-index:1">

<p class='font-70'>Merge these back</p>
:::
</td></tr></table>

</td>

<!-- this contains the yellow problem-B box(es) -->
<td style="vertical-align:top;width:5%;padding-left:10px !important">
::: {.svg-100 .no-svg-margins}
<img src="graphs/reductions/yellow_B_box.svg">
:::
</td>

<!-- this td is the right column that reduced-to problem the reduced-to solution -->
<td style="vertical-align:top;width:15%">
<!-- this table contains both the upper-right image and the down arrow on the right -->
<table class='compact'>
<tr><td><span>Edge Disjoint Paths</span></td></tr>
<tr><td> 
::: {.svg-100}
<img src="graphs/reductions/edge_disjoint_graph.svg">
:::
</td></tr>
<tr><td>

</td></tr>
<tr><td>&nbsp;</td></tr>
</table>
<!-- this table has the bottom-right image -->
<table class='compact allcenter' style="position:absolute;bottom:0;width:14%">
<tr><td><span>Solution for $B$:</span></td></tr>
<tr><td>
::: {.svg-100}
<img src="graphs/reductions/edge_disjoint_graph-2.svg">
:::
</td></tr></table>
</td>


<!-- this column contains the middle purple column and its contents -->
<td colspan=2 style="vertical-align:top;border:2px solid black;background-color:plum;width:20%">

<!-- this table contains the center top right arrow and image -->
<table class='compact allcenter'><tr><td>
::: {.r-stack}
::: {.svg-60 .no-svg-margins style="padding: 0 10px 0 10px !important;z-index:2"}
<img src="graphs/reductions/rarrow.svg" class="svg-100 no-svg-margins">
:::
<img src="graphs/reductions/edge_disjoint_graph-0-1.svg" style="z-index:1">
:::
</td></tr></table>

<!-- this table contains the center bottom left arrow and image -->
<table class='compact allcenter' style="position:absolute;bottom:0;width:20%"><tr><td>
::: {.r-stack}
::: {.svg-60 .no-svg-margins style="padding: 0 10px 0 10px !important;z-index:2"}
<img src="graphs/reductions/larrow.svg" class="svg-100 no-svg-margins">
:::

<p>Use edges with flow</p>

<img src="graphs/reductions/edge_disjoint_graph-2-1.svg" style="z-index:1">
:::
</td></tr></table>

</td>

<!-- this contains the yellow problem-B box(es) -->
<td style="vertical-align:top;width:5%;padding-left:10px !important">
::: {.svg-100 .no-svg-margins}
<img src="graphs/reductions/green_C_cylinder.svg">
:::
</td>

<!-- this td is the right column that reduced-to problem the reduced-to solution -->
<td style="vertical-align:top;width:15%">
<!-- this table contains both the upper-right image and the down arrow on the right -->
<table class='compact'>
<tr><td><span>Max Flow</span></td></tr>
<tr><td> 
::: {.svg-100}
<img src="graphs/reductions/flow_graph-3.svg">
:::
</td></tr>
<tr><td>
::: {.r-stack}
<p style="text-align:center"><img src="graphs/reductions/darrow.svg" class="svg-60 no-svg-margins" style="margin:auto !important"></p>

<p style="z-index:5" class="font-80">Ford-Fulkerson</p>
:::
</td></tr>
<tr><td>&nbsp;</td></tr>
</table>
<!-- this table has the bottom-right image -->
<table class='compact allcenter' style="position:absolute;bottom:0;width:16%">
<tr><td><span>Solution for $C$:</span></td></tr>
<tr><td>
::: {.svg-100}
<img src="graphs/reductions/flow_graph-2-True-0-False.svg">
:::
</td></tr></table>
</td>

</tr></table>



## Reductions for Algorithms

&nbsp;

- Create an algorithm for a new problem by using one you already know!
  - More algorithms = More opportunities!
- The problem you reduced to could itself be solved using a reduction!




## In General: <span class='magenta'>Reduction</span>


<table class='font-70 allcenter' style="vertical-align:top">

<tr>

<td style="vertical-align:top;width:37%;padding-right:10px !important">

<table class='allcenter'>
<tr><td class="und"><span class='font-70'>Problem we don't know how to solve</span></td></tr>
<tr><td> 
::: {.svg-100 .no-svg-margins style="width:25%;margin:auto"}
<img src="graphs/reductions/red_A_cylinder.svg">
:::
</td></tr>
<tr><td>&nbsp;</td></tr>
<tr><td>&nbsp;</td></tr>
<tr><td>&nbsp;</td></tr>
<tr><td>&nbsp;</td></tr>
<tr><td>&nbsp;</td></tr>
<tr><td><span>Solution for $A$:</span></td></tr>
<tr><td style="vertical-align:top;text-align:center">
::: {.svg-60 .no-svg-margins style="width:25%;margin:auto"}
<img src="graphs/reductions/red_X_cylinder.svg">
:::
</td></tr></table>


</td><td style="vertical-align:top;width:30%">

<table class="font-75" style="z-index:1;background-color:plum;border-left:2px solid black;border-right:2px solid black">

<tr><td class="font-90" style="border-top:2px solid black">

Map instances of problem $A$ to instances of problem $B$

</td></tr>

<tr><td>
::: {.svg-60 .no-svg-margins style="padding: 0 10px 0 10px !important"}
<img src="graphs/reductions/rarrow.svg">
:::
</td></tr>
<tr><td>

<table class='bluenote fragment'><tr><td style="padding-left:10px !important;padding-right:10px !important">

Any instance of $A$ can be mapped to some instance of $B$

</td></tr></table>

</td></tr>

<tr><td class="font-90">

Map solutions of problem $B$ to solutions of problem $A$

</td></tr>


<tr><td>
::: {.svg-60 .no-svg-margins style="padding: 0 10px 0 10px !important"}
<img src="graphs/reductions/larrow.svg">
:::
</td></tr>

<tr><td style="border-bottom:2px solid black">Reduction</td></tr>
</table>

</td>


<td style="vertical-align:top;width:33%">

<table class="compact">
<tr><td class="und"><span class='font-70'>Problem we do know how to solve</span></td></tr>
<tr><td> 

::: {.svg-100 .no-svg-margins style="width:25%;margin:auto"}
<img src="graphs/reductions/yellow_B_box.svg">
:::


</td></tr>
<tr><td> Using any algorithm<br>for $B$ </td></tr>
<tr><td>
<p style="text-align:center"><img src="graphs/reductions/darrow.svg" class="svg-60 no-svg-margins" style="margin:auto !important"></p>

</td></tr>
<tr><td><span>Solution for $B$:</span></td></tr>
<tr><td>

::: {.svg-100 .no-svg-margins style="width:25%;margin:auto"}
<img src="graphs/reductions/yellow_Y_box.svg">
:::


</td></tr>
</table>

</td>
</tr>

</table>



## Another use of Reductions

<table class='font-70 allcenter' style="vertical-align:top"><tr>
<td style="vertical-align:top;width:37%;padding-right:10px !important">
<table class='allcenter'>

<tr><td>Problem $A$</td></tr>
<tr><td> 
::: {.svg-100 .no-svg-margins style="width:25%;margin:auto"}
<img src="graphs/reductions/red_A_cylinder.svg">
:::
</td></tr>
<tr><td><table class='bluenote fragment' data-fragment-index=1><tr><td class='font-80'>Suppose I know a worst-case lower-bound of $\Omega(f(n))$ for $A$</td></tr></table></td></tr>
<tr><td>
::: {.r-stack}
<p style="text-align:center"><img src="graphs/reductions/darrow.svg" class="svg-60 no-svg-margins" style="margin:auto !important"></p>

<p class="font-80" style="text-align:center">$\Omega(f(n))$ </p>
:::
</td></tr>
<tr><td><span>Solution for $A$:</span></td></tr>
<tr><td style="vertical-align:top;text-align:center">
::: {.svg-60 .no-svg-margins style="width:25%;margin:auto"}
<img src="graphs/reductions/red_X_cylinder.svg">
:::
</td></tr></table>
</td><td style="vertical-align:top;width:30%">

<table class="font-75" style="z-index:1;background-color:plum;border-left:2px solid black;border-right:2px solid black">

<tr><td class="font-90" style="border-top:2px solid black">

Map instances of problem $A$ to instances of problem $B$

</td></tr><tr><td>
<div class="svg-100 no-svg-margins" style="margin:0;z-index:2">
<img src="graphs/reductions/rarrow.svg" class="svg-100 no-svg-margins" style="margin:0">
</div>
</td></tr><tr><td>
<table class='bluenote fragment' data-fragment-index=2><tr><td>Then this entire path must be $\Omega(f(n))$</td></tr></table>
</td></tr>
<tr><td>&nbsp;</td></tr>
<tr><td class="font-90">

Map solutions of problem $B$ to solutions of problem $A$

</td></tr><tr><td>
<div class="svg-100 no-svg-margins" style="margin:0;z-index:2">
<img src="graphs/reductions/larrow.svg" class="svg-100 no-svg-margins" style="margin:0">
</div>
</td></tr>
<tr><td>Reduction</td></tr>
</td></tr>
</table>

</td>
<td style="vertical-align:top;width:33%">

<table class="compact">

<tr><td> 

::: {.svg-100 .no-svg-margins style="width:25%;margin:auto"}
<img src="graphs/reductions/yellow_B_box.svg">
:::

</td></tr>
<tr><td>&nbsp;</td></tr>
<tr><td> Some algorithm for $B$ </td></tr>
<tr><td style="text-align:center">
<p style="text-align:center"><img src="graphs/reductions/darrow.svg" class="svg-60 no-svg-margins" style="margin:auto !important"></p>
</td></tr>
<tr><td>&nbsp;</td></tr>
<tr><td><span>Solution for $B$</span></td></tr>
<tr><td>

::: {.svg-100 .no-svg-margins style="width:25%;margin:auto"}
<img src="graphs/reductions/yellow_Y_box.svg">
:::

</td></tr></table>
</td></tr></table>





## Worst Case Lower Bound

<div class="font-85">

- Definition:
  - A <span class='bold'>worst case lower bound</span> on a problem is an <i>asymptotic lower bound on the worst case running time</i> of any algorithm which solves it
  - If $f(n)$ is a worst case lower bound for problem $A$, then the worst-case running time of any algorithm which solves $A$ must be $\Omega(f(n))$
    - i.e. for sufficiently large values of $n$, for every algorithm which solves $A$, there is at least one input of size $n$ which causes the algorithm to do $\Omega(f(n))$ steps
- Examples:
  - $n$ is a worst-case lower bound on finding the minimum in a list
  - $n^2$ is a worst-case lower bound on matrix multiplication

</div>




## Worst case lower bound Proofs

<table class='compact font-70 allcenter' style="width:100%">

<tr><td style="vertical-align:top;width:20%">

<table class='compact'>
<tr><td> <p class='font-70 center'>Opening a door</p> </td></tr>
<tr><td> ![](https://upload.wikimedia.org/wikipedia/commons/f/f6/Door-liftarn-Door-white-stroke.svg){.center style="width:50%"} </td></tr>
</table>

</td><td style="vertical-align:top;width:10%">

<table class='compact'>
<tr><td>
::: {.svg-60 .no-svg-margins style="width:75%;margin:auto"}
<img src="graphs/reductions/red_A_cylinder.svg">
:::
</td></tr>
<tr><td>Problem $A$</td></tr>
</table>

</td><td style="vertical-align:top;width:40%">

::: {.svg-60 .no-svg-margins style="padding: 0 10px 0 10px !important"}
<img src="graphs/reductions/rarrow.svg">
:::

</td><td style="vertical-align:top;width:10%">

<table class='compact'>
<tr><td>
::: {.svg-60 .no-svg-margins style="width:75%;margin:auto"}
<img src="graphs/reductions/yellow_B_box.svg">
:::
</td></tr>
<tr><td>Problem $B$</td></tr>
</table>

</td><td style="vertical-align:top;width:20%">

<table class='compact'>
<tr><td> <p class='font-70 center'>Lighting a fire</p> </td></tr>
<tr><td> ![](http://www.clipartbest.com/cliparts/4T9/E9X/4T9E9XEjc.png){.center style="width:60%;height:25%;margin-top:-20px"} </td></tr>
</table>

</td></tr>

<tr><td colspan=5>&nbsp;</td></tr>

<tr><td style="vertical-align:top">

<table class='compact'>
<tr><td> <p class='font-70 center'>Alcohol, wood,<br>matches</p> </td></tr>
<tr><td> 
::: {.r-stack}
![](https://clipground.com/images/wood-picture-clipart-5.jpg){style="width:40%"}

![](https://clipground.com/images/whiskey-bottle-clip-art-15.png){style="width:20%;padding-left:90px"}

![](https://clipart-library.com/8300/2368/matches-clipart-xl.png){style="width:30%;padding-left:140px"}
:::
</td></tr>
</table>

</td><td style="vertical-align:top">

<table class='compact'>
<tr><td>
::: {.svg-60 .no-svg-margins style="width:75%;margin:auto"}
<img src="graphs/reductions/yellow_B_box.svg">
:::
</td></tr>
<tr><td>Algorithm for $B$</td></tr>
</table>

</td><td style="vertical-align:top">

::: {.svg-60 .no-svg-margins style="padding: 0 10px 0 10px !important"}
<img src="graphs/reductions/rarrow.svg">
:::

</td><td style="vertical-align:top">

<table class='compact'>
<tr><td>
::: {.svg-60 .no-svg-margins style="width:75%;margin:auto"}
<img src="graphs/reductions/red_X_cylinder.svg">
:::
</td></tr>
<tr><td>Algorithm for $A$</td></tr>
</table>

</td><td style="vertical-align:top">

<table class='compact'>
<tr><td> <p class='font-70 center'>Keg cannon<br>battering ram</p> </td></tr>
<tr><td> 
::: {.r-stack}
<p style="margin:0;z-index:0"> ![](https://webstockreview.net/images/clipart-flames-svg-3.png){.center style="padding-bottom:80px;transform:rotate(180deg);width:30%;"} </p>
<p style="margin:0;z-index:1"> ![](https://clipground.com/images/beer-keg-clipart-20.jpg){.center style="width:30%"} </p>
:::
</td></tr>
</table>

</td></tr>

</table>

<p class='bold center'>$A$ is not harder than problem $B$: $A \le B$</p>

<p class='fragment center font-80'>The name "reduces" is confusing: it is in the <i>opposite</i> direction of the making</p>





## Proof of Lower Bound by Reduction

<table class='compact allcenter font-80'>
<tr><td colspan='3'><p class='und center fragment' data-fragment-index=1>To show: $Y$ is slow</p></td></tr>

<tr class="fragment" data-fragment-index=2><td style="width:15%">

![](https://upload.wikimedia.org/wikipedia/commons/f/f6/Door-liftarn-Door-white-stroke.svg){.center style="width:50%"}

</td><td style="width:15%">

::: {.svg-60 .no-svg-margins style="width:50%;margin:auto"}
<img src="graphs/reductions/red_X_cylinder.svg">
:::

</td><td style="text-align:left">

1. We know $X$ is slow (by a proof)
<br> (e.g., $X =$ some way to open the door)

</td></tr>

<tr class="fragment" data-fragment-index=3><td>

::: {.r-stack}
![](https://clipground.com/images/wood-picture-clipart-5.jpg){style="width:40%"}

![](https://clipground.com/images/whiskey-bottle-clip-art-15.png){style="width:20%;padding-left:65px"}

![](https://clipart-library.com/8300/2368/matches-clipart-xl.png){style="width:30%;padding-left:100px"}
:::

</td><td>

::: {.svg-60 .no-svg-margins style="width:50%;margin:auto"}
<img src="graphs/reductions/yellow_Y_box.svg">
:::

</td><td style="text-align:left">

2. Assume $Y$ is quick [toward contradiction]<br>
($Y =$ some way to light a fire)

</td></tr>

<tr><td>

::: {.r-stack .fragment data-fragment-index=5}
<p style="margin:0;z-index:0"> ![](https://webstockreview.net/images/clipart-flames-svg-3.png){.center style="padding-bottom:60px;transform:rotate(180deg);width:30%;"} </p>
<p style="margin:0;z-index:1"> ![](https://clipground.com/images/beer-keg-clipart-20.jpg){.center style="width:30%"} </p>
:::

</td><td>

::: {.r-stack}

::: {.svg-60 .no-svg-margins .fragment data-fragment-index=6 style="width:50%;margin:auto;z-index:2"}
<img src="graphs/reductions/red_X_cylinder.svg">
:::

::: {.svg-60 .no-svg-margins .fragment data-fragment-index=4 style="width:50%;margin:auto;z-index:1"}
<img src="graphs/reductions/yellow_Y_box.svg">
:::

:::

</td><td class="fragment" data-fragment-index=4 style="text-align:left">

3. Show how to use $Y$ to perform $X$ quickly

</td></tr>

<tr><td></td><td>

</td><td class="fragment" data-fragment-index='6' style="text-align:left">

4. $X$ is slow, but $Y$ could be used to perform $X$ quickly<br>
    <span class="fragment" data-fragment-index=7>conclusion: $Y$ must not actually be quick</span>

</td></tr>

</table>




## Reduction Proof Notation

<table class='compact font-70 allcenter' style="width:60%">

<tr><td style="vertical-align:top;width:25%">

<table class='compact'>
<tr><td>
::: {.svg-60 .no-svg-margins style="width:60%;margin:auto"}
<img src="graphs/reductions/red_A_cylinder.svg">
:::
</td></tr>
<tr><td style="font-size:80%">Problem $A$</td></tr>
</table>

</td><td style="vertical-align:top;width:50%">

::: {.svg-60 .no-svg-margins style="padding: 0 10px 0 10px !important"}
<img src="graphs/reductions/rarrow.svg">
:::

</td><td style="vertical-align:top;width:25%">

<table class='compact'>
<tr><td>
::: {.svg-60 .no-svg-margins style="width:60%;margin:auto"}
<img src="graphs/reductions/yellow_B_box.svg">
:::
</td></tr>
<tr><td style="font-size:80%">Problem $B$</td></tr>
</table>

</td></tr>

<tr><td style="vertical-align:top">

<table class='compact'>
<tr><td>
::: {.svg-60 .no-svg-margins style="width:60%;margin:auto"}
<img src="graphs/reductions/yellow_B_box.svg">
:::
</td></tr>
<tr><td style="font-size:80%">Algorithm for $B$</td></tr>
</table>

</td><td style="vertical-align:top">

::: {.svg-60 .no-svg-margins style="padding: 0 10px 0 10px !important"}
<img src="graphs/reductions/rarrow.svg">
:::

<p style="margin-top:-45px;text-align:center">With $O(f(n))$ overhead</p>

</td><td style="vertical-align:top">

<table class='compact'>
<tr><td>
::: {.svg-60 .no-svg-margins style="width:60%;margin:auto"}
<img src="graphs/reductions/red_X_cylinder.svg">
:::
</td></tr>
<tr><td style="font-size:80%">Algorithm for $A$</td></tr>
</table>

</td></tr>

</table>

<p class='bold center font-90'>$A$ is not <span class='magenta'>harder</span> than problem $B$</p>

<p class='bold center font-90'>$A \le B$</p>

<p class='bold center font-90'>If $A$ <span class='magenta'>requires time $\Omega(f(n))$</span> time then $B$ <span class='magenta'>also requires time $\Omega(f(n))$</span></p>

<p class='bold center font-90'>$A \le_{f(n)}B$</p>



## Two Ways to Use Reductions

<div class="font-90 center">

<p class='center'>Suppose we have a "fast" <span style="color:plum">reduction</span> from <span class='red'>$A$</span> to <span class='orange'>$B$</span></p>

<table class='compact font-80' style="width:100%"><tr><td style="width:37%;text-align:right;vertical-align:bottom"></td><td style="width:26%"><img src="graphs/reductions/mini_reduction.svg" style="margin:auto"></td><td style="width:37%;text-align:left;vertical-align:top"></td></tr></table>

<p class='center'>A "fast" algorithm for <span class='orange'>$B$</span> gives a <span class='bold'>fast algorithm</span> for <span class='red'>$A$</span></p>

<table class='compact font-80' style="width:100%"><tr><td style="width:37%;text-align:right;vertical-align:bottom">Then $\color{red}A$ is fast&nbsp;</td><td style="width:26%"><img src="graphs/reductions/mini_reduction.svg" style="margin:auto"></td><td style="width:37%;text-align:left;vertical-align:top">&nbsp;If $\color{orange}B$ is fast</td></tr></table>

<p class='center'>If we have a worst-case lower bound for <span class='red'>$A$</span>, we also have one for <span class='orange'>$B$</span></p>

<table class='compact font-80' style="width:100%"><tr><td style="width:37%;text-align:right;vertical-align:top">If $\color{red}A$ is slow&nbsp;</td><td style="width:26%"><img src="graphs/reductions/mini_reduction.svg" style="margin:auto"></td><td style="width:37%;text-align:left;vertical-align:bottom">&nbsp;Then $\color{orange}B$ is slow</td></tr></table>

</div>





## Bipartite Matching <span class='magenta'>Reduction</span>

<table class='font-70 allcenter compact' style="vertical-align:top">

<tr class='font-70'><td colspan=2 class="und"><span>Problem we don't know how to solve</span></td><td></td><td></td><td colspan=2 class="und"><span>Problem we do know how to solve</span></td></tr>

<tr><td style="vertical-align:top;width:10%">
::: {.svg-100 .no-svg-margins}
<img src="graphs/reductions/red_A_cylinder.svg">
:::
</td>

<td style="vertical-align:top;width:25%;padding-right:10px !important">
<table class='compact allcenter'>
<tr><td><span>Bipartite Matching</span></td></tr>
<tr><td> 

```{python}
#| output: asis
print_bipartite_graph(80,0)
```

</td></tr>
<tr><td>&nbsp;</td></tr>
<tr><td><span>Solution for $A$:</span></td></tr>
<tr><td style="vertical-align:top;text-align:center">

```{python}
#| output: asis
print_bipartite_graph(80,3)
```

</td></tr></table>


</td>

<td colspan=2 style="vertical-align:top">

::: {.r-stack}

<table class="compact" style="width:100%;height:60vh"><tr><td style="width:30%;border:2px solid black;background-color:plum;vertical-align:bottom;text-align:center">&nbsp;</td></tr></table>

<table class="compact" style="z-index:1;opacity:0.5"><tr><td>
::: {}

<table class="compact bipart2_outer"><tr><td><div>
::: {.r-stack}
<table class="bipart2"><tr>
<td>&nbsp;</td><td><table>
<tr><td><svg viewBox="0 0 80 20"><text x="0" y="15">Professors</text></svg></td></tr>
<tr><td><div> ![](https://engineering.virginia.edu/sites/default/files/styles/square_xxsml/public/Headshot.webp?itok=5IwaFPya) </div></td></tr>
<tr><td><div> ![](https://engineering.virginia.edu/sites/default/files/styles/square_xxsml/public/2024-07/RobbieHott-2023.JPG?h=83d1c70a&itok=kpjw11sp) </div></td></tr>
<tr><td><div> ![](https://engineering.virginia.edu/sites/default/files/styles/square_xxsml/public/Pettit3.JPG?h=7d5d1757&itok=jvoP0ymk) </div></td></tr>
<tr><td><div> ![](https://www.cs.virginia.edu/~asb/images/me.jpg) </div></td></tr>
</table></td><td>&nbsp;</td><td><table>
<tr><td><svg viewBox="0 0 80 20"><text x="16" y="15">Dogs</text></svg></td></tr>
<tr><td><div> ![](https://upload.wikimedia.org/wikipedia/commons/thumb/a/a7/Sobaka_Husky.JPG/940px-Sobaka_Husky.JPG) </div></td></tr>
<tr><td><div> ![](https://upload.wikimedia.org/wikipedia/commons/thumb/e/e4/Labrador_Retriever_snow.jpg/1196px-Labrador_Retriever_snow.jpg) </div></td></tr>
<tr><td><div> ![](https://upload.wikimedia.org/wikipedia/commons/f/f4/MiniDachshund1_wb.jpg) </div></td></tr>
<tr><td><div> ![](https://upload.wikimedia.org/wikipedia/commons/thumb/6/65/Jonangi.jpg/1280px-Jonangi.jpg) </div></td></tr>
</table></td><td>&nbsp;</td></tr></table>
<p><img src="graphs/reductions/bipartite_graph-0-True-1.svg"></p>
:::
</div></td></tr></table>

:::
</td></tr>
<tr><td style="opacity:1;z-index:6">&nbsp;</td></tr>
<tr><td style="opacity:1;z-index:6">Reduction</td></tr>
<tr><td style="opacity:1;z-index:6">&nbsp;</td></tr>
<tr><td>
::: {}

<table class="compact bipart2_outer"><tr><td><div>
::: {.r-stack}
<table class="bipart2"><tr>
<td>&nbsp;</td><td><table>
<tr><td><svg viewBox="0 0 80 20"><text x="0" y="15">Professors</text></svg></td></tr>
<tr><td><div> ![](https://engineering.virginia.edu/sites/default/files/styles/square_xxsml/public/Headshot.webp?itok=5IwaFPya) </div></td></tr>
<tr><td><div> ![](https://engineering.virginia.edu/sites/default/files/styles/square_xxsml/public/2024-07/RobbieHott-2023.JPG?h=83d1c70a&itok=kpjw11sp) </div></td></tr>
<tr><td><div> ![](https://engineering.virginia.edu/sites/default/files/styles/square_xxsml/public/Pettit3.JPG?h=7d5d1757&itok=jvoP0ymk) </div></td></tr>
<tr><td><div> ![](https://www.cs.virginia.edu/~asb/images/me.jpg) </div></td></tr>
</table></td><td>&nbsp;</td><td><table>
<tr><td><svg viewBox="0 0 80 20"><text x="16" y="15">Dogs</text></svg></td></tr>
<tr><td><div> ![](https://upload.wikimedia.org/wikipedia/commons/thumb/a/a7/Sobaka_Husky.JPG/940px-Sobaka_Husky.JPG) </div></td></tr>
<tr><td><div> ![](https://upload.wikimedia.org/wikipedia/commons/thumb/e/e4/Labrador_Retriever_snow.jpg/1196px-Labrador_Retriever_snow.jpg) </div></td></tr>
<tr><td><div> ![](https://upload.wikimedia.org/wikipedia/commons/f/f4/MiniDachshund1_wb.jpg) </div></td></tr>
<tr><td><div> ![](https://upload.wikimedia.org/wikipedia/commons/thumb/6/65/Jonangi.jpg/1280px-Jonangi.jpg) </div></td></tr>
</table></td><td>&nbsp;</td></tr></table>
<p><img src="graphs/reductions/bipartite_graph-3-True-2.svg"></p>
:::
</div></td></tr></table>

:::
</td></tr></table>

<div style="z-index:2">
::: {.svg-60 .no-svg-margins style="padding: 0 10px 0 10px !important"}
<img src="graphs/reductions/rarrow.svg">
:::
<p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p>
::: {.svg-60 .no-svg-margins style="padding: 0 10px 0 10px !important"}
<img src="graphs/reductions/larrow.svg">
:::
</div>

:::

</td>


<td style="vertical-align:top;width:10%;padding-left:10px !important">
::: {.svg-100 .no-svg-margins}
<img src="graphs/reductions/yellow_B_box.svg">
:::
</td>

<td style="vertical-align:top;width:25%">

<table class='compact'>
<tr><td><span>Max Flow</span></td></tr>
 <tr><td> 

::: {.svg-100}
<img src="graphs/reductions/flow_graph-3.svg">
:::

</td></tr>
<tr><td>&nbsp;</td></tr>
<tr><td>
::: {.r-stack}
<p style="text-align:center"><img src="graphs/reductions/darrow.svg" class="svg-60 no-svg-margins" style="margin:auto !important"></p>

::: {}
<p style="z-index:5">Ford-Fulkerson</p>
:::
:::
</td></tr>
<tr><td>&nbsp;</td></tr>
<tr><td><span>Solution for $B$:</span></td></tr>
<tr><td>

::: {.svg-100}
<img src="graphs/reductions/flow_graph-2-True-0-False.svg">
:::

</td></tr>
</table>

</td>
</tr>

</table>

<table class='fragment' data-fragment-index=1 style="position:absolute;top:50%;right:0;z-index:5"><tr><td><table class='bluenote fragment fade-out' data-fragment-index=3'><tr><td>If this is fast</td></tr></table></td></tr></table>

<table class='fragment' data-fragment-index=2 style="position:absolute;top:50%;left:0;z-index:5"><tr><td><table class='bluenote fragment fade-out' data-fragment-index=3'><tr><td>Then this is fast</td></tr></table></td></tr></table>

<table class='fragment' data-fragment-index=4 style="position:absolute;top:50%;left:0;z-index:5"><tr><td><table class='bluenote fragment fade-out' data-fragment-index=6'><tr><td>If this is slow</td></tr></table></td></tr></table>

<table class='fragment' data-fragment-index=5 style="position:absolute;top:50%;right:0;z-index:5"><tr><td><table class='bluenote fragment fade-out' data-fragment-index=6'><tr><td>Then this is slow</td></tr></table></td></tr></table>




## [Worst-case Lower Bound Using Reductions]{.r-fit-text}

&nbsp;

- Closest pair of points
  - D&C algorithm: $\Theta(n \log n)$
  - Can we do better?

&nbsp;

Idea: Show that doing closest pair in $o(n \log n)$ enables an impossibly fast algorithm for another problem





## Reductions for Lower-Bound Proofs


<table class='font-70 allcenter' style="vertical-align:top"><tr>
<td style="vertical-align:top;width:37%;padding-right:10px !important">
<table class='allcenter'>
<tr><td class="und"><span class='font-70'>Problem we know is "hard"</span></td></tr>
<tr><td>Problem $A$</td></tr>
<tr><td> 
::: {.svg-100 .no-svg-margins style="width:25%;margin:auto"}
<img src="graphs/reductions/red_A_cylinder.svg">
:::
</td></tr>
<tr><td><table class='bluenote fragment' data-fragment-index=3><tr><td>and this must be slow,</td></tr></table></td></tr>
<tr><td>
::: {.r-stack}
<p style="text-align:center"><img src="graphs/reductions/darrow.svg" class="svg-60 no-svg-margins" style="margin:auto !important"></p>

<p class="font-80" style="text-align:center">"Hard" means this<br>must be slow</p>
:::
</td></tr>
<tr><td>&nbsp;</td></tr>
<tr><td><span>Solution for $A$:</span></td></tr>
<tr><td style="vertical-align:top;text-align:center">
::: {.svg-60 .no-svg-margins style="width:25%;margin:auto"}
<img src="graphs/reductions/red_X_cylinder.svg">
:::
</td></tr></table>
</td><td style="vertical-align:top;width:30%">

<table class="font-75" style="z-index:1;background-color:plum;border-left:2px solid black;border-right:2px solid black">

<tr><td class="font-90" style="border-top:2px solid black">

<span class='bold'>Quickly</span> map instances of problem $A$ to instances of problem $B$

</td></tr><tr><td>
<div class="svg-100 no-svg-margins" style="margin:0;z-index:2">
<img src="graphs/reductions/rarrow.svg" class="svg-100 no-svg-margins" style="margin:0">
</div>
</td></tr><tr><td>
<table class='bluenote fragment' data-fragment-index=1><tr><td>If this is quick</td></tr></table>
</td></tr>
<tr><td>&nbsp;</td></tr>
<tr><td class="font-90">

Map solutions of problem $B$ to solutions of problem $A$

</td></tr><tr><td>
<div class="svg-100 no-svg-margins" style="margin:0;z-index:2">
<img src="graphs/reductions/larrow.svg" class="svg-100 no-svg-margins" style="margin:0">
</div>
</td></tr>
<tr><td>Reduction</td></tr>
<tr><td style="border-bottom:2px solid black"><table class='bluenote fragment' data-fragment-index=2><tr><td>and this is quick</td></tr></table>
</td></tr>
</table>

</td>
<td style="vertical-align:top;width:33%">

<table class="compact">
<tr><td class="und"><span class='font-70'>Problem we want to show is "hard"</span></td></tr>
<tr><td> 

::: {.svg-100 .no-svg-margins style="width:25%;margin:auto"}
<img src="graphs/reductions/yellow_B_box.svg">
:::

</td></tr>
<tr><td><table class='bluenote fragment' data-fragment-index=4><tr><td>&nbsp;then this can't be fast!&nbsp;</td></tr></table></td></tr>
<tr><td> Some algorithm for $B$ </td></tr>
<tr><td style="text-align:center">
<p style="text-align:center"><img src="graphs/reductions/darrow.svg" class="svg-60 no-svg-margins" style="margin:auto !important"></p>
</td></tr>
<tr><td><span>Solution for $B$</span></td></tr>
<tr><td>

::: {.svg-100 .no-svg-margins style="width:25%;margin:auto"}
<img src="graphs/reductions/yellow_Y_box.svg">
:::

</td></tr></table>
</td></tr></table>






## Reductions for Lower-Bound Proofs


<table class='font-70 allcenter' style="vertical-align:top"><tr>
<td style="vertical-align:top;width:37%;padding-right:10px !important">
<table class='allcenter'>
<tr><td class="und"><span class='font-70'>Problem we know is $\Omega(n \log n)$</span></td></tr>
<tr><td>Problem $A$</td></tr>
<tr><td> 
::: {.svg-100 .no-svg-margins style="width:25%;margin:auto"}
<img src="graphs/reductions/red_A_cylinder.svg">
:::
</td></tr>
<tr><td><table class='bluenote fragment' data-fragment-index=2><tr><td class='font-80'>Then this can be done in $o(n\log n)$</td></tr></table></td></tr>
<tr><td>
::: {.r-stack}
<p style="text-align:center"><img src="graphs/reductions/darrow.svg" class="svg-60 no-svg-margins" style="margin:auto !important"></p>

<p class="font-80" style="text-align:center"> $\Omega(n \log n)$</p>
:::
</td></tr>
<tr><td><span>Solution for $A$:</span></td></tr>
<tr><td style="vertical-align:top;text-align:center">
::: {.svg-60 .no-svg-margins style="width:25%;margin:auto"}
<img src="graphs/reductions/red_X_cylinder.svg">
:::
</td></tr></table>
</td><td style="vertical-align:top;width:30%">

<table class="font-75" style="z-index:1;background-color:plum;border-left:2px solid black;border-right:2px solid black">

<tr><td class="font-90" style="border-top:2px solid black">

<span class='bold'>Quickly</span> map instances of problem $A$ to instances of problem $B$

</td></tr><tr><td>
<div class="svg-100 no-svg-margins" style="margin:0;z-index:2">
<img src="graphs/reductions/rarrow.svg" class="svg-100 no-svg-margins" style="margin:0">
</div>
</td></tr><tr><td>&nbsp;</td></tr>
<tr><td>&nbsp;</td></tr>
<tr><td class="font-90">

Map solutions of problem $B$ to solutions of problem $A$

</td></tr><tr><td>
<div class="svg-100 no-svg-margins" style="margin:0;z-index:2">
<img src="graphs/reductions/larrow.svg" class="svg-100 no-svg-margins" style="margin:0">
</div>
</td></tr>
<tr><td>Reduction</td></tr>
<tr><td style="border-bottom:2px solid black">&nbsp;</td></tr>
</table>

</td>
<td style="vertical-align:top;width:33%">

<table class="compact">
<tr><td class="und"><span class='font-70'>Problem we want to show is $\Omega(n \log n)$</span></td></tr>
<tr><td> 

<table class='compact'><tr><td><img class="svg-100 no-svg-margins" src="graphs/reductions/cpp-0.svg" style="width:55%;margin:auto"></td><td>Closest<br>pair of<br>points</td></tr></table>

</td></tr>
<tr><td>&nbsp;</td></tr>
<tr><td> Some algorithm for $CPP$ </td></tr>
<tr><td><table class='bluenote fragment' data-fragment-index=1><tr><td class='font-80'>&nbsp;&nbsp;If this could be done in&nbsp;&nbsp;<br>$o(n \log n)$&nbsp;</td></tr></table></td></tr>
<tr><td style="text-align:center">
<p style="text-align:center"><img src="graphs/reductions/darrow.svg" class="svg-60 no-svg-margins" style="margin:auto !important"></p>
</td></tr>
<tr><td><span>Solution for $B$</span></td></tr>
<tr><td style="text-align:center">

<p style="text-align:center"><img class="svg-100 no-svg-margins" src="graphs/reductions/cpp-1.svg" style="width:45%;margin:auto !important"></p>

</td></tr></table>
</td></tr></table>



## [A "Hard" Problem: Element Uniqueness]{.r-fit-text}


<div class="font-70" style="float:right">
<table class="blueborder"><tr><td>113</td><td>901</td><td>555</td><td>512</td><td>245</td><td>800</td><td>018</td><td>121</td><td style="border-right:0;border-top:0;border-bottom:0 !important"><span class='blue'>True</span></td></tr></table>
<p>&nbsp;</p>
<table class="redborder"><tr><td>103</td><td>801</td><td>401</td><td><span class='red'>323</span></td><td>255</td><td><span class='red'>323</span></td><td>999</td><td>101</td><td style="border-right:0;border-top:0;border-bottom:0 !important"><span class='red'>False</span></td></tr></table>
</div>

- Input: 
    - A list of integers
- Output: 
    - <span class='blue'>True</span> if all values<br>are unique, <span class='red'>False</span> otherwise
- Can this be solved in $O(n \log n)$ time?
    - Yes! Sort, then check if any adjacent elements match
- Can this be solved in $o(n \log n)$ time?
    - No! (we're going to skip this [proof](https://en.wikipedia.org/wiki/Element_distinctness_problem))




## Reductions for Lower Bound on CPP


<table class='font-70 allcenter' style="vertical-align:top"><tr>
<td style="vertical-align:top;width:37%;padding-right:10px !important">
<table class='allcenter'>
<tr><td class="und"><span class='font-70'>Problem we know is $\Omega(n \log n)$</span></td></tr>
<tr><td>Problem $A$</td></tr>
<tr><td> 

<table><tr><td>
::: {.svg-100 .no-svg-margins style="width:25%;margin:auto"}
<img src="graphs/reductions/red_A_cylinder.svg">
:::
</td><td>

<table class='blueborder'><tr><td>5</td><td>7</td><td>9</td><td>8</td></tr></table>
<table class='redborder' style="margin-top:10px"><tr><td><span class='red'>6</span></td><td>3</td><td><span class='red'>6</span></td><td>9</td></tr></table>

</td></tr></table>

</td></tr>
<tr><td><table class='bluenote fragment' data-fragment-index=2><tr><td class='font-80'>Then this can be done in $o(n\log n)$</td></tr></table></td></tr>
<tr><td>
::: {.r-stack}
<p style="text-align:center"><img src="graphs/reductions/darrow.svg" class="svg-60 no-svg-margins" style="margin:auto !important"></p>

<p class="font-80" style="text-align:center"> $\Omega(n \log n)$</p>
:::
</td></tr>
<tr><td><span>Solution for $A$:</span></td></tr>
<tr><td style="vertical-align:top;text-align:center">
::: {.svg-60 .no-svg-margins style="width:25%;margin:auto"}
<img src="graphs/reductions/red_X_cylinder.svg">
:::
</td></tr></table>
</td><td style="vertical-align:top;width:30%">

<table class="font-75" style="z-index:1;background-color:plum;border-left:2px solid black;border-right:2px solid black">

<tr><td class="font-90" style="border-top:2px solid black">

Map instances of problem $A$ to instances of $CPP$ in $o(n \log n)$

</td></tr><tr><td>
<div class="svg-100 no-svg-margins" style="margin:0;z-index:2">
<img src="graphs/reductions/rarrow.svg" class="svg-100 no-svg-margins" style="margin:0">
</div>
</td></tr><tr><td>&nbsp;</td></tr>
<tr><td>&nbsp;</td></tr>
<tr><td class="font-90">

Map solutions of $CPP$ to solutions of problem $A$ in $o(n \log n)$

</td></tr><tr><td>
<div class="svg-100 no-svg-margins" style="margin:0;z-index:2">
<img src="graphs/reductions/larrow.svg" class="svg-100 no-svg-margins" style="margin:0">
</div>
</td></tr>
<tr><td>Reduction</td></tr>
<tr><td style="border-bottom:2px solid black">&nbsp;</td></tr>
</table>

</td>
<td style="vertical-align:top;width:33%">

<table class="compact">
<tr><td class="und"><span class='font-70'>Problem we want to show is $\Omega(n \log n)$</span></td></tr>
<tr><td> 

<table class='compact'><tr><td><img class="svg-100 no-svg-margins" src="graphs/reductions/cpp-0.svg" style="width:55%;margin:auto"></td><td>Closest<br>pair of<br>points</td></tr></table>

</td></tr>
<tr><td>&nbsp;</td></tr>
<tr><td> Some algorithm for $CPP$ </td></tr>
<tr><td><table class='bluenote fragment' data-fragment-index=1><tr><td class='font-80'>&nbsp;&nbsp;If this could be done in&nbsp;&nbsp;<br>$o(n \log n)$&nbsp;</td></tr></table></td></tr>
<tr><td style="text-align:center">
<p style="text-align:center"><img src="graphs/reductions/darrow.svg" class="svg-60 no-svg-margins" style="margin:auto !important"></p>
</td></tr>
<tr><td><span>Solution for $B$</span></td></tr>
<tr><td style="text-align:center">

<p style="text-align:center"><img class="svg-100 no-svg-margins" src="graphs/reductions/cpp-1.svg" style="width:45%;margin:auto !important"></p>

</td></tr></table>
</td></tr></table>




## Two Ways to Use Reductions

<div class="font-90 center">

<p class='center'>Suppose we have a "fast" <span style="color:plum">reduction</span> from <span class='red'>$A$</span> to <span class='orange'>$B$</span></p>

<table class='compact font-80' style="width:100%"><tr><td style="width:37%;text-align:right;vertical-align:bottom"></td><td style="width:26%"><img src="graphs/reductions/mini_reduction.svg" style="margin:auto"></td><td style="width:37%;text-align:left;vertical-align:top"></td></tr></table>

<p class='center'>A "fast" algorithm for <span class='orange'>$B$</span> gives a <span class='bold'>fast algorithm</span> for <span class='red'>$A$</span></p>

<table class='compact font-80' style="width:100%"><tr><td style="width:37%;text-align:right;vertical-align:bottom">Then $\color{red}A$ is fast&nbsp;</td><td style="width:26%"><img src="graphs/reductions/mini_reduction.svg" style="margin:auto"></td><td style="width:37%;text-align:left;vertical-align:top">&nbsp;If $\color{orange}B$ is fast</td></tr></table>

<p class='center'>If we have a worst-case lower bound for <span class='red'>$A$</span>, we also have one for <span class='orange'>$B$</span></p>

<table class='compact font-80' style="width:100%"><tr><td style="width:37%;text-align:right;vertical-align:top">If $\color{red}A$ is slow&nbsp;</td><td style="width:26%"><img src="graphs/reductions/mini_reduction.svg" style="margin:auto"></td><td style="width:37%;text-align:left;vertical-align:bottom">&nbsp;Then $\color{orange}B$ is slow</td></tr></table>

</div>



## Party Problem

::: {.r-stack}

<div style="width:100%">
<table style="width:100%;margin-top:-20px" class='compact'><tr><td style="vertical-align:middle">&nbsp;</td><td style="font-size:85%;width:55%;padding:0;vertical-align:top"><div class='font-70'>Draw edges between people who don't get along<br>
Find the maximum number of people who get along</div></td></tr></table>
<p style="text-align:center"><img src="graphs/reductions/independent_set-1.svg" style="width:65%;margin:auto;margin-top:-15%;margin-left:-5%"></p>
</div>

![](https://upload.wikimedia.org/wikipedia/commons/thumb/f/f8/The_Grinch_Merry_Christmas_-By_LOPDesigns.png/192px-The_Grinch_Merry_Christmas_-By_LOPDesigns.png){class="ispic" style="margin-left:350%;margin-top:-150%"} <!-- the grinch -->

![](https://engineering.virginia.edu/sites/default/files/styles/square_xxsml/public/Headshot.webp?itok=5IwaFPya){class="ispic" style="margin-top:175%;margin-left:-20%"} <!-- floryan -->

![](https://engineering.virginia.edu/sites/default/files/styles/square_xxsml/public/2024-07/RobbieHott-2023.JPG?h=83d1c70a&itok=kpjw11sp){class="ispic" style="margin-left:125%;margin-bottom:425%"} <!-- robbie -->

![](https://engineering.virginia.edu/sites/default/files/styles/square_xxsml/public/Pettit3.JPG?h=7d5d1757&itok=jvoP0ymk){class="ispic" style="margin-left:-175%;margin-top:-75%"} <!-- ray -->

![](https://www.cs.virginia.edu/~asb/images/me.jpg){class="ispic" style="margin-left:100%;margin-top:-75%"} <!-- me -->

![](https://www.cs.virginia.edu/~nn4pj/rich2017.jpg){class="ispic" style="margin-left:150%;margin-top:125%"} <!-- rich -->

![](https://engineering.virginia.edu/sites/default/files/styles/square_xxsml/public/2024-02/selfie%2520-%2520Paul%2520McBurney%5B1%5D.webp?h=1914eaad&itok=wEQ3K-_-){class="ispic" style="margin-left:-150%;margin-top:200%"} <!-- mcburney -->

![](https://engineering.virginia.edu/sites/default/files/styles/square_xxsml/public/2024-02/MarkSherriff_headshot.webp?itok=VIFy0Ysc){class="ispic" style="margin-top:465%;margin-left:-170%"} <!-- sherriff -->

![](https://engineering.virginia.edu/sites/default/files/styles/square_xxsml/public/2024-02/horton-tom.webp?itok=hFBeCUQC){class="ispic" style="margin-left:260%;margin-top:230%"} <!-- tom -->

![](https://engineering.virginia.edu/sites/default/files/styles/square_xxsml/public/Morrison03.JPG?h=863c5a9e&itok=JkOfG3kH){class="ispic" style="margin-bottom:400%;margin-left:-325%"} <!-- briana -->

![](https://engineering.virginia.edu/sites/default/files/styles/square_xxsml/public/2024-05/Nada_BASIT_Headshot.JPG?h=d416eee1&itok=xsIfZg10){class="ispic" style="margin-bottom: 700%;margin-left: -150%;"} <!-- nada -->

![](https://engineering.virginia.edu/sites/default/files/styles/square_xxsml/public/2024-02/Sandhya-Dwarkadas_TWZ-3_sq.webp?itok=PRTWNtgX){class="ispic" style="margin-bottom: 700%;margin-left: -300%"} <!-- sandhya -->
:::



## Maximum Independent Set

&nbsp;

- Independent set: $S \subseteq V$ is an independent set if no two nodes in $S$ share an edge
- Maximum Independent Set problem: Given a graph $G=(V,E)$, find the maximum independent set $S$





## Example

::: {.r-stack}

<div style="width:100%">
<table style="width:100%;margin-top:-20px" class='compact'><tr><td style="vertical-align:middle">&nbsp;</td><td class='redtext' style="font-size:85%;width:55%;padding:0;vertical-align:top">Independent set of size 6</td></tr></table>
<p style="text-align:center"><img src="graphs/reductions/independent_set-1.svg" style="width:65%;margin:auto;margin-top:-15%;margin-left:-5%"></p>
</div>

![](https://upload.wikimedia.org/wikipedia/commons/thumb/f/f8/The_Grinch_Merry_Christmas_-By_LOPDesigns.png/192px-The_Grinch_Merry_Christmas_-By_LOPDesigns.png){class="ispic" style="margin-left:275%;margin-top:-100%;border:5px solid red"} <!-- the grinch -->

![](https://engineering.virginia.edu/sites/default/files/styles/square_xxsml/public/Headshot.webp?itok=5IwaFPya){class="ispic" style="margin-top:175%;margin-left:-20%;border:5px solid red"} <!-- floryan -->

![](https://engineering.virginia.edu/sites/default/files/styles/square_xxsml/public/2024-07/RobbieHott-2023.JPG?h=83d1c70a&itok=kpjw11sp){class="ispic" style="margin-left:125%;margin-bottom:425%"} <!-- robbie -->

![](https://engineering.virginia.edu/sites/default/files/styles/square_xxsml/public/Pettit3.JPG?h=7d5d1757&itok=jvoP0ymk){class="ispic" style="margin-left:-175%;margin-top:-75%;border:5px solid red"} <!-- ray -->

![](https://www.cs.virginia.edu/~asb/images/me.jpg){class="ispic" style="margin-left:100%;margin-top:-75%"} <!-- me -->

![](https://www.cs.virginia.edu/~nn4pj/rich2017.jpg){class="ispic" style="margin-left:150%;margin-top:125%"} <!-- rich -->

![](https://engineering.virginia.edu/sites/default/files/styles/square_xxsml/public/2024-02/selfie%2520-%2520Paul%2520McBurney%5B1%5D.webp?h=1914eaad&itok=wEQ3K-_-){class="ispic" style="margin-left:-150%;margin-top:200%;border:5px solid red"} <!-- mcburney -->

![](https://engineering.virginia.edu/sites/default/files/styles/square_xxsml/public/2024-02/MarkSherriff_headshot.webp?itok=VIFy0Ysc){class="ispic" style="margin-top:465%;margin-left:-170%"} <!-- sherriff -->

![](https://engineering.virginia.edu/sites/default/files/styles/square_xxsml/public/2024-02/horton-tom.webp?itok=hFBeCUQC){class="ispic" style="margin-left:260%;margin-top:230%"} <!-- tom -->

![](https://engineering.virginia.edu/sites/default/files/styles/square_xxsml/public/Morrison03.JPG?h=863c5a9e&itok=JkOfG3kH){class="ispic" style="margin-bottom:400%;margin-left:-325%;border:5px solid red"} <!-- briana -->

![](https://engineering.virginia.edu/sites/default/files/styles/square_xxsml/public/2024-05/Nada_BASIT_Headshot.JPG?h=d416eee1&itok=xsIfZg10){class="ispic" style="margin-bottom: 700%;margin-left: -150%;"} <!-- nada -->

![](https://engineering.virginia.edu/sites/default/files/styles/square_xxsml/public/2024-02/Sandhya-Dwarkadas_TWZ-3_sq.webp?itok=PRTWNtgX){class="ispic" style="margin-bottom: 625%;margin-left: -300%;border:5px solid red"} <!-- sandhya -->
:::




## Generalized Baseball

![](graphs/reductions/vertex_cover-1.svg){.center}


## Generalized Baseball

<table style="width:100%"><tr><td style="width:70%">
![](graphs/reductions/vertex_cover-2.svg){.center style="width: 300%;height: 300%;max-width: 300%% !important;max-height: 300% !important;"}
</td><td class="font-80 fragment" style="vertical-align:top">Need to place defenders on bases such that every edge is defended
<br>&nbsp;<br>
What's the fewest number of defenders needed?
</td></tr></table>


## Vertex Cover

&nbsp;

- Vertex Cover: $C \subseteq V$ is a vertex cover if every edge in $E$ has one of its endpoints in $C$
- Minimum Vertex Cover: Given a graph $G=(V,E)$ find the minimum vertex cover $C$


## Generalized Baseball

<table style="width:100%"><tr><td style="width:70%">
![](graphs/reductions/vertex_cover-3.svg){.center style="width: 300%;height: 300%;max-width: 300%% !important;max-height: 300% !important;"}
</td><td class="font-80 redtext" style="vertical-align:top">Vertex cover of size 5</td></tr></table>





## MaxIndSet $\le_V$ MinVertCover

<div class="font-90">

<div class="row">

<p><img src="graphs/reductions/independent_set-2.svg" style="width:200%"></p>

<p class='center'><img src="graphs/reductions/red_A_cylinder.svg" style="height:10vh;margin-bottom:-40px"><br>Problem $A$ </p>

::: {.r-stack}
<p><img src="graphs/reductions/rarrow.svg" style="width:20vw"></p>

$O(V)$ reduces to&nbsp;&nbsp;&nbsp;&nbsp;
:::

<p class='center'><img src="graphs/reductions/yellow_B_box.svg" style="height:10vh;margin-bottom:-40px"><br>Problem $B$ </p>

![](graphs/reductions/vertex_cover-2.svg)

</div>


<div class="row">

![](graphs/reductions/vertex_cover-3.svg)

<p class='center'><img src="graphs/reductions/yellow_Y_box.svg" style="height:10vh;margin-bottom:-40px"><br>Algorithm for $B$ </p>

::: {.r-stack}
<p><img src="graphs/reductions/rarrow.svg" style="width:20vw"></p>

<span class="font-70">can be used to make&nbsp;&nbsp;&nbsp;</span>
:::

<p class='center'><img src="graphs/reductions/red_X_cylinder.svg" style="height:10vh;margin-bottom:-40px"><br>Algorithm for $A$ </p>

<p><img src="graphs/reductions/independent_set-3.svg" style="width:200%"></p>

</div>

<p class='center'>If $A$ <span class='magenta'>requires $\Omega(f(n))$ time</span>, then $B$ also <span class='magenta'>requires $\Omega(f(n))$ time</span></p>

$$A \le_V B$$


</div>



## Reduction Idea
<p class='center'>$S$ is an independent set of $G$ iff $V-S$ is a vertex cover of $G$</p>

&nbsp;

<div class='row'>
<p class='center'>Independent Set<br><img src="graphs/reductions/independent_set-3.svg" style="width:20vw"></p>
<p class='center'>Vertex Cover<br><img src="graphs/reductions/independent_set-4.svg" style="width:20vw"></p>
</div>


## Reduction Idea
<p class='center'>$S$ is an independent set of $G$ iff $V-S$ is a vertex cover of $G$</p>

&nbsp;

<div class='row'>
<p class='center'>Independent Set<br><img src="graphs/reductions/vertex_cover-4.svg" style="width:20vw"></p>
<p class='center'>Vertex Cover<br><img src="graphs/reductions/vertex_cover-3.svg" style="width:20vw"></p>
</div>



## [MinVertCov $V$-time reducible to MaxIndSet]{.r-fit-text}

<table class='font-70 allcenter compact' style="vertical-align:top;height:90%">

<tr class='font-70' style="height:0"><td colspan=2 class="und"><span>Problem we don't know how to solve</span></td><td></td><td></td><td colspan=2 class="und"><span>Problem we do know how to solve</span></td></tr>
<tr>

<!-- this td contains the "A" cylinder and the final cylinder -->
<td style="vertical-align:top;width:10%">

<table class='' style="height:100%"><tr><td>
::: {.svg-100 .no-svg-margins}
<img src="graphs/reductions/red_A_cylinder.svg">
:::
</td></tr><tr><td>
::: {.svg-100 .no-svg-margins}
<img src="graphs/reductions/red_X_cylinder.svg">
:::
</td></tr></table>
</td>

</td>

<!-- this td is the left column that contains the original problem and the final solution -->
<td style="vertical-align:top;width:25%;padding-right:10px !important">
<!-- this table contains the image on the left (the "source" problem) -->
<table class='compact allcenter'>
<tr><td><span>MinVertCov</span></td></tr>
<tr><td>
<!-- the "source" image in the upper left -->
<img src="graphs/reductions/vertex_cover-2.svg">
</td></tr></table>
<!-- this table has the bottom-left image -->
<table class='compact allcenter'>
<tr><td>&nbsp;</td></tr>
<tr><td><span>Solution for MinVertCov:</span></td></tr>
<tr><td style="vertical-align:top;text-align:center">
<img src="graphs/reductions/vertex_cover-3.svg">
</td></tr></table>
</td>

<!-- this column contains the middle purple column and its contents -->
<td colspan=2 style="vertical-align:top;border:2px solid black;background-color:plum">

<!-- this table contains the center top right arrow and image -->
<table class='compact allcenter'><tr><td>&nbsp;</td></tr><tr><td>
::: {.r-stack}
<div class="svg-100 no-svg-margins" style="margin:0;z-index:2">
<img src="graphs/reductions/rarrow.svg" class="svg-100 no-svg-margins">
</div>

<p>Do nothing</p>
:::
</td></tr></table>


&nbsp;

<table class='bluenote fragment'><tr><td>
<div style="padding-left:20px;padding-right:20px">
We must show (prove):<br>
1) how to make the<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;construction<br>
2) Why it works
</div>
</td></tr></table>

<!-- this table contains the center bottom left arrow and image -->
<table class='compact allcenter' style="position:absolute;bottom:0;width:30%"><tr><td>
::: {.r-stack}
<div class="svg-100 no-svg-margins" style="margin:0;z-index:2">
<img src="graphs/reductions/larrow.svg" class="svg-100 no-svg-margins">
</div>

<p>Take the complement</p>
:::
</td></tr></table>

</td>

<!-- this contains the yellow problem-B box(es) -->
<td style="vertical-align:top;width:10%;padding-left:10px !important">

<table class='' style="height:100%"><tr><td>
::: {.svg-100 .no-svg-margins}
<img src="graphs/reductions/yellow_B_box.svg">
:::
</td></tr><tr><td>
::: {.svg-100 .no-svg-margins}
<img src="graphs/reductions/yellow_Y_box.svg">
:::
</td></tr></table>
</td>

<!-- this td is the right column that reduced-to problem the reduced-to solution -->
<td style="vertical-align:top;width:25%">
<!-- this table contains both the upper-right image and the down arrow on the right -->
<table class='compact'>
<tr><td><span>MaxIndSet</span></td></tr>
<tr><td> 
::: {.svg-90}
<p style="style="margin-top:0;margin-bottom:0"><img src="graphs/reductions/independent_set-2.svg" style="margin-top:0;margin-bottom:0"></p>
:::
</td></tr>
<tr><td>
::: {.r-stack}
<p style="text-align:center"><img src="graphs/reductions/darrow.svg" class="svg-60 no-svg-margins" style="margin:auto !important"></p>

<p style="z-index:5">(any MaxIndSet alg)</p>
:::
</td></tr>
</table>
<!-- this table has the bottom-right image -->
<table class='compact allcenter'>
<tr><td><span>MaxIndSet solution:</span></td></tr>
<tr><td>
::: {.svg-90}
<p style="style="margin-top:0;margin-bottom:0"><img src="graphs/reductions/independent_set-3.svg" style="margin-top:0;margin-bottom:0"></p>
:::
</td></tr></table>
</td>

</tr></table>




## Proof: &lArr;
$\color{red}S$ is an independent set of $G$ iff $V-S$ is a vertex cover of $G$

<img src="graphs/reductions/independent_set-5.svg" style="float:right;width:20vw;height:auto">

Let $\color{red}S$ be an independent set

Consider any <span class='magenta'>edge</span> ${\color{magenta}(x,y)} \in E$

If $\color{red}x\in S$, then $y \notin S$ because otherwise $\color{red}S$ would not be an independent set

Therefore $y \in V-S$, so <span class='magenta'>edge</span> ${\color{magenta}(x,y)}$ is covered by $V-S$




## Proof: &rArr;
$S$ is an independent set of $G$ iff $V-S$ is a vertex cover of $G$

<img src="graphs/reductions/vertex_cover-5.svg" style="float:right;width:20vw;height:auto">

Let $\color{red}V-S$ be a vertex cover

Consider any <span class='magenta'>edge</span> ${\color{magenta}(x,y)} \in E$

At least one of $\color{red}x$ and $\color{cornflowerblue}y$ belong to $\color{red}V-S$ because $\color{red}V-S$ is a vertex cover of $G$

Therefore $\color{red}x$ and $\color{cornflowerblue}y$ are not both in $\color{cornflowerblue}S$

No edge has both end nodes in $\color{cornflowerblue}S$, thus $\color{cornflowerblue}S$ is an independent set





## [MaxIndSet $V$-time reducible to MinVertCov]{.r-fit-text}

<table class='font-70 allcenter compact' style="vertical-align:top;height:90%">

<tr class='font-70' style="height:0"><td colspan=2 class="und"><span>Problem we don't know how to solve</span></td><td></td><td></td><td colspan=2 class="und"><span>Problem we do know how to solve</span></td></tr>
<tr>

<!-- this td contains the "A" cylinder and the final cylinder -->
<td style="vertical-align:top;width:10%">

<table class='' style="height:100%"><tr><td>
::: {.svg-100 .no-svg-margins}
<img src="graphs/reductions/red_A_cylinder.svg">
:::
</td></tr><tr><td>
::: {.svg-100 .no-svg-margins}
<img src="graphs/reductions/red_X_cylinder.svg">
:::
</td></tr></table>
</td>

</td>

<!-- this td is the left column that contains the original problem and the final solution -->
<td style="vertical-align:top;width:25%;padding-right:10px !important">
<!-- this table contains the image on the left (the "source" problem) -->
<table class='compact allcenter'>
<tr><td><span>MaxIndSet</span></td></tr>
<tr><td>
<!-- the "source" image in the upper left -->
<img src="graphs/reductions/independent_set-2.svg">
</td></tr></table>
<!-- this table has the bottom-left image -->
<table class='compact allcenter'>
<tr><td>&nbsp;</td></tr>
<tr><td><span>Solution for MaxIndSet:</span></td></tr>
<tr><td style="vertical-align:top;text-align:center">
<img src="graphs/reductions/independent_set-3.svg">
</td></tr></table>
</td>

<!-- this column contains the middle purple column and its contents -->
<td colspan=2 style="vertical-align:top;border:2px solid black;background-color:plum">

<!-- this table contains the center top right arrow and image -->
<table class='compact allcenter'><tr><td>&nbsp;</td></tr><tr><td>
::: {.r-stack}
<div class="svg-100 no-svg-margins" style="margin:0;z-index:2">
<img src="graphs/reductions/rarrow.svg" class="svg-100 no-svg-margins">
</div>

<p>Do nothing</p>
:::
</td></tr></table>


&nbsp;

<table class='bluenote' style="opacity:0"><tr><td>
<div style="padding-left:20px;padding-right:20px">
We must show (prove):<br>
1) how to make the<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;construction<br>
2) Why it works
</div>
</td></tr></table>

<!-- this table contains the center bottom left arrow and image -->
<table class='compact allcenter' style="position:absolute;bottom:0;width:30%"><tr><td>
::: {.r-stack}
<div class="svg-100 no-svg-margins" style="margin:0;z-index:2">
<img src="graphs/reductions/larrow.svg" class="svg-100 no-svg-margins">
</div>

<p>Take the complement</p>
:::
</td></tr></table>

</td>

<!-- this contains the yellow problem-B box(es) -->
<td style="vertical-align:top;width:10%;padding-left:10px !important">

<table class='' style="height:100%"><tr><td>
::: {.svg-100 .no-svg-margins}
<img src="graphs/reductions/yellow_B_box.svg">
:::
</td></tr><tr><td>
::: {.svg-100 .no-svg-margins}
<img src="graphs/reductions/yellow_Y_box.svg">
:::
</td></tr></table>
</td>

<!-- this td is the right column that reduced-to problem the reduced-to solution -->
<td style="vertical-align:top;width:25%">
<!-- this table contains both the upper-right image and the down arrow on the right -->
<table class='compact'>
<tr><td><span>MinVertCov</span></td></tr>
<tr><td> 
::: {.svg-100}
<p style="style="margin-top:0;margin-bottom:0"><img src="graphs/reductions/vertex_cover-2.svg" style="margin-top:0;margin-bottom:0"></p>
:::
</td></tr>
<tr><td>
::: {.r-stack}
<p style="text-align:center"><img src="graphs/reductions/darrow.svg" class="svg-60 no-svg-margins" style="margin:auto !important"></p>

<p style="z-index:5">(any MinVertCov alg)</p>
:::
</td></tr>
</table>
<!-- this table has the bottom-right image -->
<table class='compact allcenter'>
<tr><td><span>MinVertCov solution:</span></td></tr>
<tr><td>
::: {.svg-100}
<p style="style="margin-top:0;margin-bottom:0"><img src="graphs/reductions/vertex_cover-3.svg" style="margin-top:0;margin-bottom:0"></p>
:::
</td></tr></table>
</td>

</tr></table>

<table class='fragment' style="position:absolute;top:50%;left:0;z-index:5"><tr><td><table class='bluenote'><tr><td>If solving $A$ was<br>always slow</td></tr></table></td></tr></table>

<table class='fragment' style="position:absolute;top:50%;right:0;z-index:5"><tr><td><table class='bluenote'><tr><td>Then this shows<br>solving $B$ is also slow</td></tr></table></td></tr></table>



## [MinVertCov $V$-time reducible to MaxIndSet]{.r-fit-text}

<table class='font-70 allcenter compact' style="vertical-align:top;height:90%">

<tr class='font-70' style="height:0"><td colspan=2 class="und"><span>Problem we don't know how to solve</span></td><td></td><td></td><td colspan=2 class="und"><span>Problem we do know how to solve</span></td></tr>
<tr>

<!-- this td contains the "A" cylinder and the final cylinder -->
<td style="vertical-align:top;width:10%">

<table class='' style="height:100%"><tr><td>
::: {.svg-100 .no-svg-margins}
<img src="graphs/reductions/red_A_cylinder.svg">
:::
</td></tr><tr><td>
::: {.svg-100 .no-svg-margins}
<img src="graphs/reductions/red_X_cylinder.svg">
:::
</td></tr></table>
</td>

</td>

<!-- this td is the left column that contains the original problem and the final solution -->
<td style="vertical-align:top;width:25%;padding-right:10px !important">
<!-- this table contains the image on the left (the "source" problem) -->
<table class='compact allcenter'>
<tr><td><span>MinVertCov</span></td></tr>
<tr><td>
<!-- the "source" image in the upper left -->
<img src="graphs/reductions/vertex_cover-2.svg">
</td></tr></table>
<!-- this table has the bottom-left image -->
<table class='compact allcenter'>
<tr><td>&nbsp;</td></tr>
<tr><td>&nbsp;</td></tr>
<tr><td><span>Solution for MinVertCov:</span></td></tr>
<tr><td style="vertical-align:top;text-align:center">
<img src="graphs/reductions/vertex_cover-3.svg">
</td></tr></table>
</td>

<!-- this column contains the middle purple column and its contents -->
<td colspan=2 style="vertical-align:top;border:2px solid black;background-color:plum">

<!-- this table contains the center top right arrow and image -->
<table class='compact allcenter'><tr><td>&nbsp;</td></tr><tr><td>
::: {.r-stack}
<div class="svg-100 no-svg-margins" style="margin:0;z-index:2">
<img src="graphs/reductions/rarrow.svg" class="svg-100 no-svg-margins">
</div>

<p>Do nothing</p>
:::
</td></tr></table>


&nbsp;

<table class='bluenote' style="opacity:0"><tr><td>
<div style="padding-left:20px;padding-right:20px">
We must show (prove):<br>
1) how to make the<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;construction<br>
2) Why it works
</div>
</td></tr></table>

<!-- this table contains the center bottom left arrow and image -->
<table class='compact allcenter' style="position:absolute;bottom:0;width:30%"><tr><td>
::: {.r-stack}
<div class="svg-100 no-svg-margins" style="margin:0;z-index:2">
<img src="graphs/reductions/larrow.svg" class="svg-100 no-svg-margins">
</div>

<p>Take the complement</p>
:::
</td></tr></table>

</td>

<!-- this contains the yellow problem-B box(es) -->
<td style="vertical-align:top;width:10%;padding-left:10px !important">

<table class='' style="height:100%"><tr><td>
::: {.svg-100 .no-svg-margins}
<img src="graphs/reductions/yellow_B_box.svg">
:::
</td></tr><tr><td>
::: {.svg-100 .no-svg-margins}
<img src="graphs/reductions/yellow_Y_box.svg">
:::
</td></tr></table>
</td>

<!-- this td is the right column that reduced-to problem the reduced-to solution -->
<td style="vertical-align:top;width:25%">
<!-- this table contains both the upper-right image and the down arrow on the right -->
<table class='compact'>
<tr><td><span>MaxIndSet</span></td></tr>
<tr><td> 
::: {.svg-90}
<p style="style="margin-top:0;margin-bottom:0"><img src="graphs/reductions/independent_set-2.svg" style="margin-top:0;margin-bottom:0"></p>
:::
</td></tr>
<tr><td>
::: {.r-stack}
<p style="text-align:center"><img src="graphs/reductions/darrow.svg" class="svg-60 no-svg-margins" style="margin:auto !important"></p>

<p style="z-index:5">(any MaxIndSet alg)</p>
:::
</td></tr>
</table>
<!-- this table has the bottom-right image -->
<table class='compact allcenter'>
<tr><td><span>MaxIndSet solution:</span></td></tr>
<tr><td>
::: {.svg-90}
<p style="style="margin-top:0;margin-bottom:0"><img src="graphs/reductions/independent_set-3.svg" style="margin-top:0;margin-bottom:0"></p>
:::
</td></tr></table>
</td>

</tr></table>

<table class='fragment' style="position:absolute;top:50%;left:0;z-index:5"><tr><td><table class='bluenote'><tr><td>If solving $A$ was<br>always slow</td></tr></table></td></tr></table>

<table class='fragment' style="position:absolute;top:50%;right:0;z-index:5"><tr><td><table class='bluenote'><tr><td>Then this shows<br>solving $B$ is also slow</td></tr></table></td></tr></table>



## Conclusion

&nbsp;

- MaxIndSet and MinVertCov are either both fast, or both slow
- Spoiler alert: We don’t know which!
	- (But we think they’re both slow)
- Both problems are <span class='purple'>NP-Complete</span>


# NP-Completeness <!-- from day23.pptx -->

::: {.titlereading}
Readings in CLRS 4th edition: chapter 34
:::



## Introduction

- What we could prove that some problems are (most likely) hard?
	- Here, "hard" means that it runs in exponential time
	- "easy" means that it runs in polynomial time
- We *want* there to be "hard" problems
	- Cracking encryption should be "hard"
	- But regular encryption and decryption should be "easy"
- Given a new encryption algorithm, how do we show that it's really "hard"?
	- And not that we just haven't found an "easy" solution?

## DMT 1 review

&nbsp;

- An AND $(\wedge)$ operation is called a *conjunction*
- An OR $(\vee)$ operation is called a *disjunction*
- DeMorgan's law: 
	- $\neg(a \vee b) == \neg a \wedge \neg b$ 
	- $\neg(a \wedge b) == \neg a \vee \neg b$


## Background: Satisfiability (SAT)
- Given a boolean expression, can we find an assignment of true/false values to the variables such that the entire expression is true?
- Examples: 
	- $x_1 \wedge (x_2 \vee \neg x_3) \wedge (\neg x_1 \vee x_3) \wedge (x_2 \vee \neg x_3)$
		- Yes: $x_1$ is true, $x_2$ is true, $x_3$ is true
	- $x_1 \wedge (x_2 \vee \neg x_3) \wedge (\neg x_1 \vee x_3) \wedge ({\color{red}\neg} x_2 \vee \neg x_3)$
		- No, there is no assignment of true/false values that will satisfy this equation

## Background: Satisfiability (SAT)
- The equations presented so far:
	- $x_1 \wedge (x_2 \vee \neg x_3) \wedge (\neg x_1 \vee x_3) \wedge (x_2 \vee \neg x_3)$
	- $x_1 \wedge (x_2 \vee \neg x_3) \wedge (\neg x_1 \vee x_3) \wedge ({\color{red}\neg} x_2 \vee \neg x_3)$
- ... are in *conjunctive normal form*
	- Meaning it's a conjunction (AND'ing) of disjunctions (OR'ing)
	- We'll keep this as a standard format
- Nobody yet has found an *efficient* (polynomial-time) algorithm to solve it, only exponential-time algorithms
- Note that this problem is hard to *solve*, but easy to *verify* when given an answer


## [How would we check for a valid UVA userid?]{.r-fit-text}
- Format:
	- Starts with 2 or 3 letters
	- Optional digit
	- 1-3 more letters if there was a digit
- Valid forms:
	ll, lll, lldl, llldl, lldll, llldll, lldlll, llldlll


## Programmatically
 
```{python}
#| eval: false
#| echo: true
#| output: true
def check_uva_userid1(what):
  chars = list(what.lower())
  
  # check first character (must be a letter)
  if len(chars) == 0: return False
  if not chars[0].isalpha(): return False
  chars.pop(0)
  
  # check second character (must be a letter)
  if len(chars) == 0: return False
  if not chars[0].isalpha(): return False
  chars.pop(0)
  
  # return true if of the form ll
  if len(chars) == 0: return True
  
  # check optional 3rd letter
  if chars[0].isalpha():
    chars.pop(0)
    # return true if of the form lll
    if len(chars) == 0: return True
  
  # check digit
  if len(chars) == 0: return False
  if not chars[0].isdigit(): return False
  chars.pop(0)
  
  # check first letter after the digit
  if len(chars) == 0: return False
  if not chars[0].isalpha(): return False
  chars.pop(0)
  
  # return true if of the form lldl or llldl
  if len(chars) == 0: return True
  
  # check second letter after the digit
  if not chars[0].isalpha(): return False
  chars.pop(0)
  
  # return true if of the form lldll or llldll
  if len(chars) == 0: return True
  
  # check third letter after the digit
  if not chars[0].isalpha(): return False
  chars.pop(0)
  
  # return true if of the form lldlll or llldlll
  if len(chars) == 0: return True
  
  # if there is more input, then it's not a valid userid
  return False
```

Source: [uvauserid1.py](src/reductions/uvauserid1.py.html)

## Automata

<div class="font-90">

Let's phrase this using a *finite state machine*

![](graphs/reductions/automata_1.svg){.center style="width:75%"}

- Each arrow assumes that it pops (consumes) one character
- Double circled states are final states
	- If the end of input is in a final state, the string is *accepted*

</div>


## As code

```{python}
#| eval: false
#| echo: true
#| output: true
def check_uva_userid2(what):
  # returns True if the passed parameter is a valid UVA userid, else False

  state_table = [ 
    # from each state, where to go on an 'l', 'd', and 'o', respectively
    [], # we numbered our states from 1, so we burn spot 0
    [2,    None, None], # state 1 goes to 2 on a letter
    [3,    None, None], # state 2 goes to 3 on a letter
    [4,    5,    None], # state 3 goes to 4 on a letter and 5 on a digit
    [None, 5,    None], # state 4 goes to 5 on a digit
    [6,    None, None], # state 5 goes to 6 on a letter
    [7,    None, None], # state 6 goes to 7 on a letter
    [8,    None, None], # state 7 goes to 8 on a letter
    [None, None, None], # no transitions out of state 8
  ]
  final_states = [3, 4, 6, 7, 8]

  chars = list(what.lower())
  state = 1
  while len(chars) > 0:

    # which is whether it's a letter (0), digit (1), or other (2)
    which = 0 if chars[0].isalpha() else 1 if chars[0].isdigit() else 2

    # get the state transition, and verify it's not None
    next_state = state_table[state][which]
    if next_state is None: return False

    # transition to that state and pop the input character
    state = next_state
    chars.pop(0)

  # we should have ended in a final state
  return state in final_states
```

Source: [uvauserid2.py](src/reductions/uvauserid2.py.html)

## Automata

What if we only have one accepting (aka final) state?

::: {.r-stack}
![](graphs/reductions/automata_2.svg){.center style="width:50vw"}

![](graphs/reductions/automata_8.svg){.center style="width:50vw" .fragment}

![](graphs/reductions/automata_9.svg){.center style="width:50vw" .fragment}

![](graphs/reductions/automata_10.svg){.center style="width:50vw" .fragment}

![](graphs/reductions/automata_11.svg){.center style="width:50vw" .fragment}
:::

- But which way to go?
	- In state 2, on a input of a letter, we could go to two different states: 3 or 8 (likewise for states 3, 5, and 6)
- This is called *non-determinism*


## Automata

![](graphs/reductions/automata_3.svg){.center style="width:50%"}

The same automata as the last slide, but laid out differently


## Why non-determinism

- Easier to model many "things"
	- Regular expressions, for example
- All non-deterministic finite automata (NFAs) can be converted into *deterministic* finite automata (DFAs)
	- And they have to be for our (deterministic) computers to use them
- Sometimes converting an polynomial-time NFA yields an *exponential* time DFA


## Automata

![](graphs/reductions/automata_4.svg){.center style="width:50%"}

This has empty ($\epsilon$) transitions; only allowed on NFAs


## Automata definitions
- DFA: Deterministic Finite Automata
	- From any state, on any input, there is at most one destination state
- NFA: Non-deterministic Finite Automata
	- There is at least one state, which on some input, has more than one possible destination state
	- and/or there is at least one empty transition
- The range of languages (strings) that these can produce (aka accept) are called *regular* languages


## Automata and languages

![](graphs/reductions/automata_5.svg){.fragment style="width:25%;height:auto;float:right"}

- How would you write an automata that can accept strings with *some* positive number of a's followed by some positive number of b's?
	- Expressed as $a^+b^+$


## More powerful automata

![](graphs/reductions/automata_6.svg){.fragment data-fragment-index=1 style="height:70%;float:right;width:30%"}

- How would you write an automata that can accept strings with some positive number of a's followed by **the same number** of b's?
	- Expressed as $a^nb^n$

&nbsp;

::: {.fragment data-fragment-index=1}
- Answer: you can't.  Any *finite* automata of $n$ states cannot accept a string of $n+1$ a's (and $n+1$ b's)
:::

## Accepting $a^nb^n$

![](graphs/reductions/automata_6.svg){style="height:70%;float:right;width:30%"}

- To accept these strings, you need *memory*: how many a's have been accepted
- This is done via a stack
	- On each a, push a value onto the stack
	- On each b, pop a value from the stack
- Ensure the stack is empty at the end
- This is called a *push-down automata*
- The range of languages (strings) that these can produce (aka accept) are called *context-free* languages


## Even more powerful automata

- What about $a^nb^nc^n$?
- A push-down automata (from the last slide) can't handle this
- You need something called a *linear-bounded automata*
	- An automata with a limited form of memory
- The range of languages (strings) that these can produce (aka accept) are called *context-sensitive* languages


## Yet even more powerful automata

![](graphs/reductions/automata_7.svg){.center style="float:right;width:40vw;height:auto;margin-left:20px"}

- What about a programming language?
- This needs a *Turing machine*, which can compute anything a computer can compute
	- Such languages are called *recursively enumerable* languages


## Turing Machines

![](graphs/reductions/automata_7.svg){style="float:right;width:30vw;height:auto"}

- A Turing machine has a NFA (or DFA) as it's "control"
	- A computer's current memory state is, in effect, a DFA state
- And an infinite tape that it can read and write values to
	- Analogous to a computer's memory
- (image from [texexample.net](https://texample.net//tikz/examples/turing-machine-2/))


## NFA Animation

![](graphs/reductions/automata_3.svg){style="float:right;width:40%;height:auto"}

- Back to our NFA to accept UVA userids
- Imagine that this is the NFA in a Turing machine
	- Although this one does not use memory
- We'll trace through accepting any valid UVA userid
- Goal: what states can the NFA be in at any step?


## NFA Animation

::: {.r-stack style="width:100%;height:50%"}

![](graphs/reductions/automata_3a.svg){style="height:60vh"}

![](graphs/reductions/automata_3b.svg){.fragment style="height:60vh"}

![](graphs/reductions/automata_3c.svg){.fragment style="height:60vh"}

![](graphs/reductions/automata_3d.svg){.fragment style="height:60vh"}

![](graphs/reductions/automata_3e.svg){.fragment style="height:60vh"}

![](graphs/reductions/automata_3f.svg){.fragment style="height:60vh"}

![](graphs/reductions/automata_3g.svg){.fragment style="height:60vh"}

![](graphs/reductions/automata_3h.svg){.fragment style="height:60vh"}

![](graphs/reductions/automata_3i.svg){.fragment style="height:60vh"}
:::



## What state is the NFA in?

| Step | $s_1$ | $s_2$ | $s_3$ | $s_4$ | $s_5$ | $s_6$ | $s_7$ | $s_8$ |
|------|-------|-------|-------|-------|-------|-------|-------|-------|
| 1    | <span class='blue'>true</span>  | false | false | false | false | false | false | false |
| 2    | false | <span class='blue'>true</span>  | false | false | false | false | false | false |
| 3    | false | false | <span class='blue'>true</span>  | false | false | false | false | <span class='blue'>true</span>  |
| 4    | false | false | false | <span class='blue'>true</span>  | <span class='blue'>true</span>  | false | false | <span class='blue'>true</span>  |
| 5    | false | false | false | false | <span class='blue'>true</span>  | <span class='blue'>true</span> | false | <span class='blue'>true</span> |
| 6    | false | false | false | false | false | <span class='blue'>true</span>  | <span class='blue'>true</span> | <span class='blue'>true</span>  |
| 7    | false | false | false | false | false | false | <span class='blue'>true</span>  | <span class='blue'>true</span>  |
| 8    | false | false | false | false | false | false | false | <span class='blue'>true</span>  |




## What state is the NFA in?


| Step | $s_1$ | $s_2$ | $s_3$ | $s_4$ | $s_5$ | $s_6$ | $s_7$ | $s_8$ |
|------|-------|-------|-------|-------|-------|-------|-------|-------|
| 1    | <span class='blue'>$s_1$</span>  | $\neg s_2$ | $\neg s_3$ | $\neg s_4$ | $\neg s_5$ | $\neg s_6$ | $\neg s_7$ | $\neg s_8$ |
| 2    | $\neg s_1$ | <span class='blue'>$s_2$</span>  | $\neg s_3$ | $\neg s_4$ | $\neg s_5$ | $\neg s_6$ | $\neg s_7$ | $\neg s_8$ |
| 3    | $\neg s_1$ | $\neg s_2$ | <span class='blue'>$s_3$</span>  | $\neg s_4$ | $\neg s_5$ | $\neg s_6$ | $\neg s_7$ | <span class='blue'>$s_8$</span>  |
| 4    | $\neg s_1$ | $\neg s_2$ | $\neg s_3$ | <span class='blue'>$s_4$</span>  | <span class='blue'>$s_5$</span>  | $\neg s_6$ | $\neg s_7$ | <span class='blue'>$s_8$</span>  |
| 5    | $\neg s_1$ | $\neg s_2$ | $\neg s_3$ | $\neg s_4$ | <span class='blue'>$s_5$</span>  | <span class='blue'>$s_6$</span> | $\neg s_7$ | <span class='blue'>$s_8$</span> |
| 6    | $\neg s_1$ | $\neg s_2$ | $\neg s_3$ | $\neg s_4$ | $\neg s_5$ | <span class='blue'>$s_6$</span>  | <span class='blue'>$s_7$</span> | <span class='blue'>$s_8$</span>  |
| 7    | $\neg s_1$ | $\neg s_2$ | $\neg s_3$ | $\neg s_4$ | $\neg s_5$ | $\neg s_6$ | <span class='blue'>$s_7$</span>  | <span class='blue'>$s_8$</span>  |
| 8    | $\neg s_1$ | $\neg s_2$ | $\neg s_3$ | $\neg s_4$ | $\neg s_5$ | $\neg s_6$ | $\neg s_7$ | <span class='blue'>$s_8$</span>  |



## Adding in step numbers (the *tableu*)


| Step | $s_1$ | $s_2$ | $s_3$ | $s_4$ | $s_5$ | $s_6$ | $s_7$ | $s_8$ |
|------|-------|-------|-------|-------|-------|-------|-------|-------|
| 1    | <span class='blue'>$s_{11}$</span>  | $\neg s_{12}$ | $\neg s_{13}$ | $\neg s_{14}$ | $\neg s_{15}$ | $\neg s_{16}$ | $\neg s_{17}$ | $\neg s_{18}$ |
| 2    | $\neg s_{21}$ | <span class='blue'>$s_{22}$</span>  | $\neg s_{23}$ | $\neg s_{24}$ | $\neg s_{25}$ | $\neg s_{26}$ | $\neg s_{27}$ | $\neg s_{28}$ |
| 3    | $\neg s_{31}$ | $\neg s_{32}$ | <span class='blue'>$s_{33}$</span>  | $\neg s_{34}$ | $\neg s_{35}$ | $\neg s_{36}$ | $\neg s_{37}$ | <span class='blue'>$s_{38}$</span>  |
| 4    | $\neg s_{41}$ | $\neg s_{42}$ | $\neg s_{43}$ | <span class='blue'>$s_{44}$</span>  | <span class='blue'>$s_{45}$</span>  | $\neg s_{46}$ | $\neg s_{47}$ | <span class='blue'>$s_{48}$</span>  |
| 5    | $\neg s_{51}$ | $\neg s_{52}$ | $\neg s_{53}$ | $\neg s_{54}$ | <span class='blue'>$s_{55}$</span> | <span class='blue'>$s_{56}$</span> | $\neg s_{57}$ |  <span class='blue'>$s_{58}$</span> |
| 6    | $\neg s_{61}$ | $\neg s_{62}$ | $\neg s_{63}$ | $\neg s_{64}$ | $\neg s_{65}$ | <span class='blue'>$s_{66}$</span>  |  <span class='blue'>$s_{67}$</span> | <span class='blue'>$s_{68}$</span>  |
| 7    | $\neg s_{71}$ | $\neg s_{72}$ | $\neg s_{73}$ | $\neg s_{74}$ | $\neg s_{75}$ | $\neg s_{76}$ | <span class='blue'>$s_{77}$</span>  | <span class='blue'>$s_{78}$</span>  |
| 8    | $\neg s_{81}$ | $\neg s_{82}$ | $\neg s_{83}$ | $\neg s_{84}$ | $\neg s_{85}$ | $\neg s_{86}$ | $\neg s_{87}$ | <span class='blue'>$s_{88}$</span>  |






## Re-arranging the states


| Step | $s_1$ | $s_2$ | $s_3$ | $s_4$ | $s_5$ | $s_6$ | $s_7$ | $s_8$ |
|------|-------|-------|-------|-------|-------|-------|-------|-------|
| 1    | <span class='blue'>$s_{11}$</span>  | $\neg s_{12}$ | $\neg s_{13}$ | $\neg s_{14}$ | $\neg s_{15}$ | $\neg s_{16}$ | $\neg s_{17}$ | $\neg s_{18}$ |
| 2    | <span class='blue'>$s_{22}$</span>  | $\neg s_{21}$ |  $\neg s_{23}$ | $\neg s_{24}$ | $\neg s_{25}$ | $\neg s_{26}$ | $\neg s_{27}$ | $\neg s_{28}$ |
| 3    | <span class='blue'>$s_{33}$</span>  | <span class='blue'>$s_{38}$</span>  | $\neg s_{31}$ | $\neg s_{32}$ | $\neg s_{34}$ | $\neg s_{35}$ | $\neg s_{36}$ | $\neg s_{37}$ | 
| 4    | <span class='blue'>$s_{44}$</span>  | <span class='blue'>$s_{45}$</span>  |  <span class='blue'>$s_{48}$</span>  | $\neg s_{41}$ | $\neg s_{42}$ | $\neg s_{43}$ |  $\neg s_{46}$ | $\neg s_{47}$ |
| 5    | <span class='blue'>$s_{55}$</span>  | <span class='blue'>$s_{56}$</span>  | <span class='blue'>$s_{58}$</span>  | $\neg s_{51}$ | $\neg s_{52}$ | $\neg s_{53}$ | $\neg s_{54}$ | $\neg s_{57}$ |
| 6    | <span class='blue'>$s_{66}$</span>  | <span class='blue'>$s_{67}$</span>  | <span class='blue'>$s_{68}$</span>  | $\neg s_{61}$ | $\neg s_{62}$ | $\neg s_{63}$ | $\neg s_{64}$ | $\neg s_{65}$ |
| 7    | <span class='blue'>$s_{77}$</span>  | <span class='blue'>$s_{78}$</span>  | $\neg s_{71}$ | $\neg s_{72}$ | $\neg s_{73}$ | $\neg s_{74}$ | $\neg s_{75}$ | $\neg s_{76}$ | 
| 8    | <span class='blue'>$s_{88}$</span>  | $\neg s_{81}$ | $\neg s_{82}$ | $\neg s_{83}$ | $\neg s_{84}$ | $\neg s_{85}$ | $\neg s_{86}$ | $\neg s_{87}$ | 


## Rephrasing the last slide

1. ${\color{blue}s_{11}} \wedge \neg s_{12} \wedge \neg s_{13} \wedge \neg s_{14} \wedge \neg s_{15} \wedge \neg s_{16} \wedge \neg s_{17} \wedge \neg s_{18}$
2. ${\color{blue}s_{22}} \wedge \neg s_{21} \wedge \neg s_{23} \wedge \neg s_{24} \wedge \neg s_{25} \wedge \neg s_{26} \wedge \neg s_{27} \wedge \neg s_{28}$
3. $({\color{blue}s_{33}} \vee {\color{blue}s_{38}}) \wedge \neg s_{31} \wedge \neg s_{32} \wedge \neg s_{34} \wedge \neg s_{35} \wedge \neg s_{36} \wedge \neg s_{37}$
4. $({\color{blue}s_{44}} \vee {\color{blue}s_{45}} \vee {\color{blue}s_{48}}) \wedge \neg s_{41} \wedge \neg s_{42} \wedge \neg s_{43} \wedge \neg s_{46} \wedge \neg s_{47}$
5. $({\color{blue}s_{55}} \vee  {\color{blue}s_{56}} \vee {\color{blue}s_{58}}) \wedge \neg s_{51} \wedge \neg s_{52} \wedge \neg s_{53} \wedge \neg s_{54} \wedge \neg s_{57}$
6. $({\color{blue}s_{66}} \vee {\color{blue}s_{67}} \vee {\color{blue}s_{68}}) \wedge \neg s_{61} \wedge \neg s_{62} \wedge \neg s_{63} \wedge \neg s_{64} \wedge \neg s_{65}$
7. $({\color{blue}s_{77}} \vee {\color{blue}s_{78}}) \wedge \neg s_{71} \wedge \neg s_{72} \wedge \neg s_{73} \wedge \neg s_{74} \wedge \neg s_{75} \wedge \neg s_{76}$
8. ${\color{blue}s_{88}} \wedge \neg s_{81} \wedge \neg s_{82} \wedge \neg s_{83} \wedge \neg s_{84} \wedge \neg s_{85} \wedge \neg s_{86} \wedge \neg s_{87}$


## A final formula

$$
\begin{array}{l}
accepted = \\
{\color{blue}s_{11}} \wedge \neg s_{12} \wedge \neg s_{13} \wedge \neg s_{14} \wedge \neg s_{15} \wedge \neg s_{16} \wedge \neg s_{17} \wedge \neg s_{18} \wedge \\
{\color{blue}s_{22}} \wedge \neg s_{21} \wedge \neg s_{23} \wedge \neg s_{24} \wedge \neg s_{25} \wedge \neg s_{26} \wedge \neg s_{27} \wedge \neg s_{28} \wedge \\
({\color{blue}s_{33}} \vee {\color{blue}s_{38}}) \wedge \neg s_{31} \wedge \neg s_{32} \wedge \neg s_{34} \wedge \neg s_{35} \wedge \neg s_{36} \wedge \neg s_{37} \wedge \\
({\color{blue}s_{44}} \vee {\color{blue}s_{45}} \vee {\color{blue}s_{48}}) \wedge \neg s_{41} \wedge \neg s_{42} \wedge \neg s_{43} \wedge \neg s_{46} \wedge \neg s_{47} \wedge \\
({\color{blue}s_{55}} \vee  {\color{blue}s_{56}} \vee {\color{blue}s_{58}}) \wedge \neg s_{51} \wedge \neg s_{52} \wedge \neg s_{53} \wedge \neg s_{54} \wedge \neg s_{57} \wedge \\
({\color{blue}s_{66}} \vee {\color{blue}s_{67}} \vee {\color{blue}s_{68}}) \wedge \neg s_{61} \wedge \neg s_{62} \wedge \neg s_{63} \wedge \neg s_{64} \wedge \neg s_{65} \wedge \\
({\color{blue}s_{77}} \vee {\color{blue}s_{78}}) \wedge \neg s_{71} \wedge \neg s_{72} \wedge \neg s_{73} \wedge \neg s_{74} \wedge \neg s_{75} \wedge \neg s_{76} \wedge \\
{\color{blue}s_{88}} \wedge \neg s_{81} \wedge \neg s_{82} \wedge \neg s_{83} \wedge \neg s_{84} \wedge \neg s_{85} \wedge \neg s_{86} \wedge \neg s_{87} \\
\end{array}
$$

[That's satisfiability!]{.fragment}


## Cook-Levin Theorem (1971)

- Any such problem
	- ...of the type we have seen...
- ... that can be solved by a Turing machine...
	- And thus an automata (DFA or NFA), push-down automata, etc.
- ... can be reduced to satisfiability


## Complexity classes

<div class="font-85">

![](images/reductions/P-NP.svg){style="float:right;margin-left:20px"}

- <span class='green'>P</span>: Any problem that can be solved by a *deterministic* finite automata (DFA) in polynomial time
	- Solution can be *verified* in polynomial time
- <span class='blue'>NP</span>: Any problem that can be solved by a *non-deterministic* finite automata (NFA) in polynomial time
	- Might take exponential time on a DFA
	- Solution can be *verified* in polynomial time
- If a problem can be solved by a DFA in polynomial time, then it can be solved by an NFA in polynomial time
	- Thus, ${\color{forestgreen}P} \subset {\color{blue}NP}$

</div>



## Complexity classes

<div class="font-80">

![](images/reductions/NP-hard.svg){style="float:right;margin-left:20px"}

- <span class='red'>NP-hard</span>
	- A problem that is at *least* as difficult as NP
		- Could be more difficult, but not *less* difficult
- There are believed to be problems in NP that are not NP-hard (none yet proven)

[There are actually many more complexity classes:]{.fragment data-fragment-index=1}

::: {.r-stack}
![](images/reductions/Complexity_classes.svg){style="float:left;width:35vh;margin-left:10vw" .fragment data-fragment-index=1}

![](images/reductions/Complexity_classes-2.svg){style="float:left;width:35vh;margin-left:10vw" .fragment data-fragment-index=2}
:::

</div>


## Recap: Satisfiability (SAT)

- No efficient solution to SAT has yet been found
	- Maybe one exists, though...
- We know it's in <span class='blue'>NP</span>
	- As we can verify a solution in polynomial time
- What if we want to show that some problem $X$ is just as difficult as SAT?
- We would want to show that both:
	- $X$ reduces to SAT: $X \le_p SAT$
	- SAT reduces to $X$: $SAT \le_p X$
- That would mean they are (roughly) equivalent in difficulty
	- And that likely no efficient solution can be found


## Complexity classes

<div class="font-95">

![](images/reductions/P-NP-NP-complete.svg){style="float:right;margin-left:20px"}

- <span class='purple'>NP-complete</span>
	- A set of problems that are of equivalent difficulty as SAT
- We show problem $X$ is <span class='purple'>NP-complete</span> by:
	- Reducing SAT (or another <span class='purple'>NP-complete</span> problem) to $X$
	- Reducing $X$ to SAT (or another <span class='purple'>NP-complete</span> problem)
		- But if $X \in {\color{blue}NP}$, then it reduces to SAT via the Cook-Levin theorem
		- So we just have to show $X \in {\color{blue}NP}$
</div>


## Showing $X \in NP$
- Via a proof we won't show here, it has been shown that:
  - A problem $X$ being in <span class='blue'>NP</span>
  	- Meaning solvable by a NFA in polynomial time
  - And an solution to $X$ being able to be *verified* in polynomial time
- Are actually the same thing

&nbsp;

[So we just have to show that we can *verify* a problem's solution in polynomial time to show it is in <span class='blue'>NP</span>]{.fragment}



## Example reduction: Vertex Cover

![](graphs/reductions/vertex_cover-3.svg){style="float:right;margin-left:20px;width:20vw;height:auto"}

- Consider the minimum vertex cover problem:
	- Given a graph $G=(V,E)$, find a set of vertices $C\subseteq V$ such that every edge in $E$ has at least one endpoint in $C$
- To prove it's <span class='purple'>NP-complete</span>:
	- Show it's in <span class='blue'>NP</span> (this means it reduces to SAT)
	  - $VC \in {\color{blue}NP} \equiv VC \le_p SAT$
	- Reduce a known <span class='purple'>NP-complete</span> problem to it
	  - $SAT \le_p VC$


## Example reduction: Vertex Cover

- Show it's in <span class='blue'>NP</span> (this means it reduces to SAT)
	- Given a set of vertices $C$, we can, in polynomial time, verify all edges in $E$ have at least one endpoint in $C$
		- We just check each edge has at least one end point in $C$ which takes $\Theta(E)$ time
- Reduce another <span class='purple'>NP-complete</span> problem to it
	- Maximum Independent Set is <span class='purple'>NP-complete</span>
	- So we reduce Maximum Independent Set to Minimum Vertex Cover
	- (shown a few slides ago: just take the complement graph)
- Thus, the vertex cover problem is  <span class='purple'>NP-complete</span>


## Counter-intuitiveness

<div class='font-85'>

Two things tend to be counter-intuitive when trying to prove that problem $X$ is <span class='purple'>NP-complete</span>:

1. You are not *solving* the problem, or giving a direct algorithm to solve it
   - You are only showing that it reduces to and from another <span class='purple'>NP-complete</span> problem (for which you may not know a algorithm for)
2. You reduce another <span class='purple'>NP-complete</span> problem ***to*** problem $X$
	 - Recall that we want to show both:
	   - $X \le_p SAT$ (or another <span class='purple'>NP-complete</span> instead of SAT)
	   - $SAT \le_p X$ (or another <span class='purple'>NP-complete</span> instead of SAT)
	 - But the first one is already proven (assuming you show it's in <span class='blue'>NP</span>)
	 - So you only have to show the second of those $(SAT \le_p X)$

</div>


## Why we can't just reduce $X$ to SAT

```{python}
#| output: asis
print_bipartite_graph(25,1,"float:right;margin-left:20px")
```

<div class="font-80">

- Consider the problem of finding *a* bipartite matching (not necessarily maximal)
- Reduce it to SAT:
  - Create a set of clauses for the possible matchings: $bloomfied \wedge husky$, $pettit \wedge labrador$, etc.
    - But also ensure one dog per person:<br> $bloomfied \wedge husky \wedge \neg labrador \wedge \neg dachshund \wedge \neg jonangi$
    - Likewise ensure one human per dog
  - OR all these clauses together
  - Negate, via DeMorgan's Law, into conjunctive normal form
- Solve using SAT
- Solution: DeMorgan-ize it again out of conjunctive normal form, and examine the clauses with the correct pairings

</div>



## Why we can't just reduce $X$ to SAT

```{python}
#| output: asis
print_bipartite_graph(25,1,"float:right;margin-left:20px")
```

<div class="font-90">

What did we just show?

- That non-maximal bipartite matching can be reduced to SAT
- But non-maximal bipartite matching is much easier than SAT!
	- A non-maximal matching can be done in $O(V)$ time: go through the left nodes, and assign them to an arbitrary right node that is not yet assigned
- This doesn't show that non-maximal bipartite matching is as difficult as SAT
	- Only that SAT is more difficult than non-maximal bipartite matching

</div>


## [Can SAT be solved in polynomial time?]{.r-fit-text}

- Nobody has found an efficient solution
	- But that doesn't mean one doesn't exist
- It has not yet been proven that one can *not* solve it in polynomial time
	- Just that nobody has yet figured out a way to do so
- If it can't be solved in polynomial time, then ${\color{forestgreen}P} \ne {\color{blue}NP}$
- If it *can* be solved in polynomial time, then ${\color{forestgreen}P} = {\color{blue}NP}$
	- This would be *bad* -- all modern encryption would be crackable
- If you can prove this, one way or the other, you get a [million dollar prize](https://www.claymath.org/millennium/p-vs-np/)


## Complexity classes

&nbsp;

![](images/reductions/P_np_np-complete_np-hard.svg){.center}
